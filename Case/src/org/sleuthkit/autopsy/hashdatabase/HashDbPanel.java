/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * HashDbPanel.java
 *
 * Created on Oct 11, 2011, 2:44:56 PM
 */
package org.sleuthkit.autopsy.hashdatabase;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.sleuthkit.autopsy.logging.Log;
import org.sleuthkit.datamodel.TskException;

/**
 * Panel for selecting a hash database.
 * @author pmartel
 */
class HashDbPanel extends javax.swing.JPanel {

    /**
     * Current hash database backing the panel (can be null).
     */
    HashDb db;
    /**
     * Name to title this database panel.
     */
    String databaseName;
    /**
     * Details of this database slot.
     */
    String databaseDetails;
    private JFileChooser fc = new JFileChooser();

    /**
     * Create a panel from a current setting and description strings.
     * @param db current hash database (can be null)
     * @param databaseName name to title this database panel
     * @param databaseDetails details of this database
     */
    HashDbPanel(HashDb db, String databaseName, String databaseDetails) {
        this.db = db; // nullable
        this.databaseDetails = databaseDetails;
        this.databaseName = databaseName;

        fc.setDragEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);

        this.initComponents();
        this.refresh();
    }

    /**
     * Gets the string for the (re)index button.
     * @return "Reindex" if the database and index exist, otherwise "Index"
     */
    private String indexOrReindex() {
        return (this.db != null) && this.db.databaseExists() && this.db.indexExists() ? "Reindex" : "Index";
    }

    private String databaseName() {
        return this.databaseName;
    }

    private String databaseDetails() {
        return this.databaseDetails;
    }

    /**
     * @return Path to database to display in panel
     */
    private String path() {
        return (this.db != null) ? this.db.databasePath : "";
    }

    /**
     * Short description of the index/db state (if there is one)
     * @return 
     */
    private String indexStatus() {
        return (this.db != null) ? db.status().message() : "";
    }

    /**
     * Check if an index can be created.
     * @return true if the database exists
     */
    private boolean indexable() {
        return (this.db != null) && db.databaseExists();
    }

    private boolean invalid() {
        return (this.db != null) && this.db.status().equals(IndexStatus.NONE);
    }

    /**
     * Updates the state of all panel elements.
     */
    private void refresh() {
        this.databasePathField.setText(this.path());
        this.indexButton.setEnabled(this.indexable());
        this.indexButton.setText(this.indexOrReindex());
        this.indexStatusLabel.setText(this.indexStatus());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        databaseNameLabel = new javax.swing.JLabel();
        databasePathField = new javax.swing.JFormattedTextField();
        indexButton = new javax.swing.JButton();
        indexStatusLabel = new javax.swing.JLabel();
        databaseDetailsLabel = new javax.swing.JLabel();
        fileSelectButton = new javax.swing.JButton();

        databaseNameLabel.setFont(databaseNameLabel.getFont().deriveFont(databaseNameLabel.getFont().getStyle() | java.awt.Font.BOLD, databaseNameLabel.getFont().getSize()+2));
        databaseNameLabel.setText(databaseName());

        databasePathField.setText(path());
        databasePathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databasePathFieldActionPerformed(evt);
            }
        });
        databasePathField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                databasePathFieldFocusLost(evt);
            }
        });

        indexButton.setText(indexOrReindex());
        indexButton.setEnabled(indexable());
        indexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexButtonActionPerformed(evt);
            }
        });

        indexStatusLabel.setText(indexStatus());

        databaseDetailsLabel.setText(databaseDetails());
        databaseDetailsLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        fileSelectButton.setText(org.openide.util.NbBundle.getMessage(HashDbPanel.class, "HashDbPanel.fileSelectButton.text")); // NOI18N
        fileSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSelectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseNameLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(indexButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(indexStatusLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(databasePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileSelectButton))
                            .addComponent(databaseDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databaseNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databaseDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databasePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileSelectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexButton)
                    .addComponent(indexStatusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void indexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexButtonActionPerformed
        if (this.db != null) {
            try {
                // change the cursor to "waiting cursor"
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try {
                    this.db.createIndex();
                } finally {
                    this.setCursor(null);
                }
            } catch (TskException ex) {
                Log.get(this.getClass()).log(Level.WARNING, "Couldn't create index.", ex);
            }
        }

        this.refresh();
    }//GEN-LAST:event_indexButtonActionPerformed

    private void databasePathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databasePathFieldActionPerformed
        // if field becomes editable: add handler
    }//GEN-LAST:event_databasePathFieldActionPerformed

    private void fileSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSelectButtonActionPerformed

        int retval = fc.showOpenDialog(this);

        if (retval == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            try {
                String filePath = f.getCanonicalPath();

                if (HashDb.isIndexPath(filePath)) {
                    filePath = HashDb.toDatabasePath(filePath);
                }

                this.db = new HashDb(filePath);


            } catch (IOException ex) {
                Logger.getLogger(HashDbPanel.class.getName()).log(Level.WARNING, "Couldn't get selected file path.", ex);
                return;
            }
        }

        this.refresh();
    }//GEN-LAST:event_fileSelectButtonActionPerformed

    private void databasePathFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_databasePathFieldFocusLost

        String path = databasePathField.getText().trim();

        if (path.isEmpty()) {
            this.db = null;
        } else {
            File f = new File(path);
            try {
                String filePath = f.getCanonicalPath();

                if (HashDb.isIndexPath(filePath)) {
                    filePath = HashDb.toDatabasePath(filePath);
                }

                this.db = new HashDb(filePath);

            } catch (IOException ex) {
                Logger.getLogger(HashDbPanel.class.getName()).log(Level.WARNING, "Couldn't get selected file path.", ex);
                return;
            }
        }

        this.refresh();
    }//GEN-LAST:event_databasePathFieldFocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel databaseDetailsLabel;
    private javax.swing.JLabel databaseNameLabel;
    private javax.swing.JFormattedTextField databasePathField;
    private javax.swing.JButton fileSelectButton;
    private javax.swing.JButton indexButton;
    private javax.swing.JLabel indexStatusLabel;
    // End of variables declaration//GEN-END:variables
}
