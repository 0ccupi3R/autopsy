/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.casemodule.datasourceSummary;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.datamodel.DataSource;
import org.sleuthkit.datamodel.OSInfo;
import org.sleuthkit.datamodel.OSUtility;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;

public class DataSourceSummaryDetailsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private List<OSInfo> osInfoList;
    private static final Logger logger = Logger.getLogger(DataSourceSummaryDetailsPanel.class.getName());

    /**
     * Creates new form DataSourceSummaryDetailsPanel
     */
    public DataSourceSummaryDetailsPanel() {
        initComponents();
        try {
            SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
            osInfoList = OSUtility.getOSInfo(skCase);
        } catch (TskCoreException | NoCurrentCaseException ex) {
            logger.log(Level.SEVERE, "Failed to load ingest jobs.", ex);
            JOptionPane.showMessageDialog(this, Bundle.DataSourceSummaryPanel_getDataSources_error_text(), Bundle.DataSourceSummaryPanel_getDataSources_error_title(), JOptionPane.ERROR_MESSAGE);
        }
    }

    void updateDetailsPanelData(DataSource selectedDataSource) {
        operatingSystemValueLabel.setText(getOSName(selectedDataSource));
        this.repaint();
    }

    /**
     * Get the name of the operating system if it is available. Otherwise get
     * and empty string.
     *
     * @param selectedDataSource the datasource to get the OS information for
     *
     * @return the name of the operating system on the specified datasource,
     *         empty string if no operating system info found
     */
    private String getOSName(DataSource selectedDataSource) {
        String osName = "";
        if (selectedDataSource != null) {
            for (OSInfo osInfo : osInfoList) {
                try {
                    //assumes only one Operating System per datasource
                    //get the datasource id from the OSInfo's first artifact if it has artifacts
                    if (!osInfo.getArtifacts().isEmpty() && osInfo.getArtifacts().get(0).getDataSource().getId() == selectedDataSource.getId()) {
                        if (!osName.isEmpty()) {
                            osName += ", ";
                        }
                        osName += osInfo.getOSName();
                        //if this OSInfo object has a name use it otherwise keep checking OSInfo objects
                    }
                } catch (TskCoreException ignored) {
                    //unable to get datasource for the OSInfo Object 
                    //continue checking for OSInfo objects to try and get get the desired information
                }
            }
        }
        return osName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operatingSystemLabel = new javax.swing.JLabel();
        operatingSystemValueLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(operatingSystemLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryDetailsPanel.class, "DataSourceSummaryDetailsPanel.operatingSystemLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operatingSystemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operatingSystemValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operatingSystemLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(operatingSystemValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel operatingSystemLabel;
    private javax.swing.JLabel operatingSystemValueLabel;
    // End of variables declaration//GEN-END:variables
}
