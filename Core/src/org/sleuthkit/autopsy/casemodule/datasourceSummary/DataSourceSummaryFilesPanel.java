/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.casemodule.datasourceSummary;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.autopsy.datamodel.utils.FileTypeUtils;
import org.sleuthkit.datamodel.DataSource;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;
import org.sleuthkit.datamodel.TskData;

public class DataSourceSummaryFilesPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private FilesTableModel filesTableModel = new FilesTableModel(null);
    private static final Logger logger = Logger.getLogger(DataSourceSummaryFilesPanel.class.getName());

    /**
     * Creates new form DataSourceSummaryFilesPanel
     */
    public DataSourceSummaryFilesPanel() {
        initComponents();
        fileCountsTable.getTableHeader().setReorderingAllowed(false);
    }

    void updateFilesTableData(DataSource selectedDataSource) {
        filesTableModel = new FilesTableModel(selectedDataSource);
        fileCountsTable.setModel(filesTableModel);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileCountsScrollPane = new javax.swing.JScrollPane();
        fileCountsTable = new javax.swing.JTable();
        fileCountsLabel = new javax.swing.JLabel();

        fileCountsTable.setModel(filesTableModel);
        fileCountsScrollPane.setViewportView(fileCountsTable);

        org.openide.awt.Mnemonics.setLocalizedText(fileCountsLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryFilesPanel.class, "DataSourceSummaryFilesPanel.fileCountsLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileCountsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(fileCountsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileCountsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileCountsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileCountsLabel;
    private javax.swing.JScrollPane fileCountsScrollPane;
    private javax.swing.JTable fileCountsTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model for the files table model to display counts of specific file
     * types found in the currently selected data source.
     */
    @Messages({"DataSourceSummaryFilesPanel.FilesTableModel.type.header=File Type",
        "DataSourceSummaryFilesPanel.FilesTableModel.count.header=Count"})
    private class FilesTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;
        private final DataSource currentDataSource;
        private final List<String> columnHeaders = new ArrayList<>();

        /**
         * Create a FilesTableModel for the speicified datasource.
         *
         * @param selectedDataSource the datasource which this filesTablemodel
         *                           will represent
         */
        FilesTableModel(DataSource selectedDataSource) {
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesTableModel_type_header());
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesTableModel_count_header());
            currentDataSource = selectedDataSource;
        }

        @Override
        public int getRowCount() {
            //should be kept equal to the number of types we are displaying in the tables
            return 5;
        }

        @Override
        public int getColumnCount() {
            return columnHeaders.size();
        }

        @Messages({
            "DataSourceSummaryFilesPanel.FilesTableModel.images.row=Images",
            "DataSourceSummaryFilesPanel.FilesTableModel.videos.row=Videos",
            "DataSourceSummaryFilesPanel.FilesTableModel.audio.row=Audio",
            "DataSourceSummaryFilesPanel.FilesTableModel.documents.row=Documents",
            "DataSourceSummaryFilesPanel.FilesTableModel.executables.row=Executables"
        })
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                switch (rowIndex) {
                    case 0:
                        return Bundle.DataSourceSummaryFilesPanel_FilesTableModel_images_row();
                    case 1:
                        return Bundle.DataSourceSummaryFilesPanel_FilesTableModel_videos_row();
                    case 2:
                        return Bundle.DataSourceSummaryFilesPanel_FilesTableModel_audio_row();
                    case 3:
                        return Bundle.DataSourceSummaryFilesPanel_FilesTableModel_documents_row();
                    case 4:
                        return Bundle.DataSourceSummaryFilesPanel_FilesTableModel_executables_row();
                    default:
                        break;
                }
            } else if (columnIndex == 1) {
                switch (rowIndex) {
                    case 0:
                        return getCountOfFiles(FileTypeUtils.FileTypeCategory.IMAGE.getMediaTypes());
                    case 1:
                        return getCountOfFiles(FileTypeUtils.FileTypeCategory.VIDEO.getMediaTypes());
                    case 2:
                        return getCountOfFiles(FileTypeUtils.FileTypeCategory.AUDIO.getMediaTypes());
                    case 3:
                        return getCountOfFiles(FileTypeUtils.FileTypeCategory.DOCUMENTS.getMediaTypes());
                    case 4:
                        return getCountOfFiles(FileTypeUtils.FileTypeCategory.EXECUTABLE.getMediaTypes());
                    default:
                        break;
                }
            }
            return null;
        }

        /**
         * Get the number of files in the case database for the current data
         * source which have the specified mimetypes.
         *
         * @param setOfMimeTypes the set of mime types which we are finding the
         *                       number of occurences of
         *
         * @return a Long value which represents the number of occurrences of
         *         the specified mime types in the current case for the
         *         specified data source, null if no count was retrieved
         */
        private Long getCountOfFiles(Set<String> setOfMimeTypes) {
            if (currentDataSource != null) {
                try {
                    String inClause = String.join("', '", setOfMimeTypes);
                    SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
                    return skCase.countFilesWhere("data_source_obj_id=" + currentDataSource.getId()
                            + " AND type<>" + TskData.TSK_DB_FILES_TYPE_ENUM.VIRTUAL_DIR.getFileType()
                            + " AND dir_type<>" + TskData.TSK_FS_NAME_TYPE_ENUM.VIRT_DIR.getValue()
                            + " AND mime_type IN ('" + inClause + "')"
                            + " AND name<>''");
                } catch (TskCoreException | NoCurrentCaseException ex) {
                    logger.log(Level.WARNING, "Unable to get count of files for specified mime types", ex);
                    //unable to get count of files for the specified mimetypes cell will be displayed as empty
                }
            }
            return null;
        }

        @Override
        public String getColumnName(int column) {
            return columnHeaders.get(column);
        }

    }
}
