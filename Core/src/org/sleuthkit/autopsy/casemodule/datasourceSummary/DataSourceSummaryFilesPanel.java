/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.casemodule.datasourceSummary;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.datamodel.utils.FileTypeUtils;
import org.sleuthkit.datamodel.DataSource;

/**
 * Panel for displaying summary information on the known files present in the
 * specified DataSource
 */
public class DataSourceSummaryFilesPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private FilesByMimeTypeTableModel filesByMimeTypeTableModel = new FilesByMimeTypeTableModel(null);
    private FilesByCategoryTableModel filesByCategoryTableModel = new FilesByCategoryTableModel(null);
    private static final Logger logger = Logger.getLogger(DataSourceSummaryFilesPanel.class.getName());
    private final Map<Long, Long> allFilesCountsMap;
    private final Map<Long, Long> slackFilesCountsMap;
    private final Map<Long, Long> directoriesCountsMap;
    private final Map<Long, Long> unallocatedFilesCountsMap;
    private final DefaultTableCellRenderer rightAlignedRenderer = new DefaultTableCellRenderer();

    /**
     * Creates new form DataSourceSummaryFilesPanel
     */
    public DataSourceSummaryFilesPanel(Map<Long, Long> fileCountsMap) {
        this.allFilesCountsMap = fileCountsMap;
        this.slackFilesCountsMap = DataSourceInfoUtilities.getCountsOfSlackFiles();
        this.directoriesCountsMap = DataSourceInfoUtilities.getCountsOfDirectories();
        this.unallocatedFilesCountsMap = DataSourceInfoUtilities.getCountsOfUnallocatedFiles();
        rightAlignedRenderer.setHorizontalAlignment(JLabel.RIGHT);
        initComponents();
        fileCountsByMimeTypeTable.getTableHeader().setReorderingAllowed(false);
        fileCountsByCategoryTable.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * Specify the DataSource to display file information for
     *
     * @param selectedDataSource the DataSource to display file information for
     */
    void updateFilesTableData(DataSource selectedDataSource) {
        filesByMimeTypeTableModel = new FilesByMimeTypeTableModel(selectedDataSource);
        fileCountsByMimeTypeTable.setModel(filesByMimeTypeTableModel);
        fileCountsByMimeTypeTable.getColumnModel().getColumn(1).setCellRenderer(rightAlignedRenderer);
        filesByCategoryTableModel = new FilesByCategoryTableModel(selectedDataSource);
        fileCountsByCategoryTable.setModel(filesByCategoryTableModel);
        fileCountsByCategoryTable.getColumnModel().getColumn(1).setCellRenderer(rightAlignedRenderer);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileCountsByMimeTypeScrollPane = new javax.swing.JScrollPane();
        fileCountsByMimeTypeTable = new javax.swing.JTable();
        fileCountsByMimeTypeLabel = new javax.swing.JLabel();
        fileCountsByCategoryScrollPane = new javax.swing.JScrollPane();
        fileCountsByCategoryTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        fileCountsByMimeTypeTable.setModel(filesByMimeTypeTableModel);
        fileCountsByMimeTypeScrollPane.setViewportView(fileCountsByMimeTypeTable);

        org.openide.awt.Mnemonics.setLocalizedText(fileCountsByMimeTypeLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryFilesPanel.class, "DataSourceSummaryFilesPanel.fileCountsByMimeTypeLabel.text")); // NOI18N

        fileCountsByCategoryTable.setModel(filesByCategoryTableModel);
        fileCountsByCategoryScrollPane.setViewportView(fileCountsByCategoryTable);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DataSourceSummaryFilesPanel.class, "DataSourceSummaryFilesPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileCountsByMimeTypeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(fileCountsByMimeTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileCountsByCategoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fileCountsByCategoryScrollPane, fileCountsByMimeTypeScrollPane});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileCountsByCategoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileCountsByMimeTypeLabel)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileCountsByMimeTypeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fileCountsByCategoryScrollPane, fileCountsByMimeTypeScrollPane});

    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane fileCountsByCategoryScrollPane;
    private javax.swing.JTable fileCountsByCategoryTable;
    private javax.swing.JLabel fileCountsByMimeTypeLabel;
    private javax.swing.JScrollPane fileCountsByMimeTypeScrollPane;
    private javax.swing.JTable fileCountsByMimeTypeTable;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model for the files table model to display counts of specific file
     * types found in the currently selected data source.
     */
    @Messages({"DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.type.header=File Type",
        "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.count.header=Count"})
    private class FilesByMimeTypeTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;
        private final DataSource currentDataSource;
        private final List<String> columnHeaders = new ArrayList<>();

        /**
         * Create a FilesTableModel for the speicified datasource.
         *
         * @param selectedDataSource the datasource which this filesTablemodel
         *                           will represent
         */
        FilesByMimeTypeTableModel(DataSource selectedDataSource) {
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_type_header());
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_count_header());
            currentDataSource = selectedDataSource;
        }

        @Override
        public int getRowCount() {
            //should be kept equal to the number of types we are displaying in the tables
            return 5;
        }

        @Override
        public int getColumnCount() {
            return columnHeaders.size();
        }

        @Messages({
            "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.images.row=Images",
            "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.videos.row=Videos",
            "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.audio.row=Audio",
            "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.documents.row=Documents",
            "DataSourceSummaryFilesPanel.FilesByMimeTypeTableModel.executables.row=Executables"
        })
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                switch (rowIndex) {
                    case 0:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_images_row();
                    case 1:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_videos_row();
                    case 2:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_audio_row();
                    case 3:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_documents_row();
                    case 4:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByMimeTypeTableModel_executables_row();
                    default:
                        break;
                }
            } else if (columnIndex == 1) {
                switch (rowIndex) {
                    case 0:
                        return DataSourceInfoUtilities.getCountOfFilesForMimeTypes(currentDataSource, FileTypeUtils.FileTypeCategory.IMAGE.getMediaTypes());
                    case 1:
                        return DataSourceInfoUtilities.getCountOfFilesForMimeTypes(currentDataSource, FileTypeUtils.FileTypeCategory.VIDEO.getMediaTypes());
                    case 2:
                        return DataSourceInfoUtilities.getCountOfFilesForMimeTypes(currentDataSource, FileTypeUtils.FileTypeCategory.AUDIO.getMediaTypes());
                    case 3:
                        return DataSourceInfoUtilities.getCountOfFilesForMimeTypes(currentDataSource, FileTypeUtils.FileTypeCategory.DOCUMENTS.getMediaTypes());
                    case 4:
                        return DataSourceInfoUtilities.getCountOfFilesForMimeTypes(currentDataSource, FileTypeUtils.FileTypeCategory.EXECUTABLE.getMediaTypes());
                    default:
                        break;
                }
            }
            return null;
        }

        @Override
        public String getColumnName(int column) {
            return columnHeaders.get(column);
        }

    }

    /**
     * Table model for the files table model to display counts of specific file
     * types found in the currently selected data source.
     */
    @Messages({"DataSourceSummaryFilesPanel.FilesByCategoryTableModel.type.header=File Type",
        "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.count.header=Count"})
    private class FilesByCategoryTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;
        private final DataSource currentDataSource;
        private final List<String> columnHeaders = new ArrayList<>();

        /**
         * Create a FilesTableModel for the speicified datasource.
         *
         * @param selectedDataSource the datasource which this filesTablemodel
         *                           will represent
         */
        FilesByCategoryTableModel(DataSource selectedDataSource) {
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_type_header());
            columnHeaders.add(Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_count_header());
            currentDataSource = selectedDataSource;
        }

        @Override
        public int getRowCount() {
            //should be kept equal to the number of types we are displaying in the tables
            return 5;
        }

        @Override
        public int getColumnCount() {
            return columnHeaders.size();
        }

        @Messages({
            "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.all.row=All",
            "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.allocated.row=Allocated",
            "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.unallocated.row=Unallocated",
            "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.slack.row=Slack",
            "DataSourceSummaryFilesPanel.FilesByCategoryTableModel.directory.row=Directory"

        })
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                switch (rowIndex) {
                    case 0:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_all_row();
                    case 1:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_allocated_row();
                    case 2:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_unallocated_row();
                    case 3:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_slack_row();
                    case 4:
                        return Bundle.DataSourceSummaryFilesPanel_FilesByCategoryTableModel_directory_row();
                    default:
                        break;
                }
            } else if (columnIndex == 1) {
                switch (rowIndex) {
                    case 0:
                        return allFilesCountsMap.get(currentDataSource.getId()) == null ? 0 : allFilesCountsMap.get(currentDataSource.getId());
                    case 1:
                        Long unallocatedFilesCount = unallocatedFilesCountsMap.get(currentDataSource.getId());
                        Long allFilesCount = allFilesCountsMap.get(currentDataSource.getId());
                        if (allFilesCount == null) {
                            return 0;
                        } else if (unallocatedFilesCount == null) {
                            return allFilesCount;
                        } else {
                            return allFilesCount - unallocatedFilesCount;
                        }
                    case 2:
                        return unallocatedFilesCountsMap.get(currentDataSource.getId()) == null ? 0 : unallocatedFilesCountsMap.get(currentDataSource.getId());
                    case 3:
                        return slackFilesCountsMap.get(currentDataSource.getId()) == null ? 0 : slackFilesCountsMap.get(currentDataSource.getId());
                    case 4:
                        return directoriesCountsMap.get(currentDataSource.getId()) == null ? 0 : directoriesCountsMap.get(currentDataSource.getId());
                    default:
                        break;
                }
            }
            return null;
        }

        @Override
        public String getColumnName(int column) {
            return columnHeaders.get(column);
        }

    }
}
