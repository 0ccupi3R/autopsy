/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.casemodule.datasourceSummary;

import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.datamodel.DataSource;
import org.sleuthkit.datamodel.IngestJobInfo;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;
import org.sleuthkit.datamodel.TskData;

public class DataSourceSummaryPanel extends javax.swing.JPanel {

    private final List<IngestJobInfo> allIngestJobs = new ArrayList<>();
    private List<IngestJobInfo> ingestJobs = new ArrayList<>();
    private DataSourceTableModel dataSourceTableModel = new DataSourceTableModel();
    private IngestJobTableModel ingestJobTableModel = new IngestJobTableModel();
    private final List<DataSource> dataSources = new ArrayList<>();
    private final DateFormat datetimeFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
    private static final Logger logger = Logger.getLogger(DataSourceSummaryPanel.class.getName());

    /**
     * Creates new form DataSourceSummary
     */
    @Messages({"DataSourceSummaryPanel.getDataSources.error.text=Failed to get the list of datasources for the current case.",
        "DataSourceSummaryPanel.getDataSources.error.title=Load Failure"})
    public DataSourceSummaryPanel() {
        initComponents();
        ingestJobsTable.getTableHeader().setReorderingAllowed(false);
        fileCountsTable.getTableHeader().setReorderingAllowed(false);
        dataSourcesTable.getTableHeader().setReorderingAllowed(false);
        try {
            SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
            allIngestJobs.addAll(skCase.getIngestJobs());
            dataSources.addAll(skCase.getDataSources());
        } catch (TskCoreException | NoCurrentCaseException ex) {
            logger.log(Level.SEVERE, "Failed to load ingest jobs.", ex);
            JOptionPane.showMessageDialog(this, Bundle.DataSourceSummaryPanel_getDataSources_error_text(), Bundle.DataSourceSummaryPanel_getDataSources_error_title(), JOptionPane.ERROR_MESSAGE);
        }
        dataSourcesTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                updateIngestJobs();
            }
        });
    }

    @Messages({"DataSourceSummaryPanel.loadIngestJob.error.text=Failed to load ingest jobs.",
        "DataSourceSummaryPanel.loadIngestJob.error.title=Load Failure"})
    private void updateIngestJobs() {
        Long selectedDataSourceId = (dataSourcesTable.getSelectedRow() < 0 ? null : dataSources.get(dataSourcesTable.getSelectedRow()).getId());
        ingestJobs.clear();
        if (selectedDataSourceId != null) {
            for (IngestJobInfo ingestJob : allIngestJobs) {
                if (ingestJob.getObjectId() == selectedDataSourceId) {
                    ingestJobs.add(ingestJob);
                }
            }
        }
        ingestJobTableModel = new IngestJobTableModel();
        ingestJobsTable.setModel(ingestJobTableModel);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        dataSourcesScrollPane = new javax.swing.JScrollPane();
        dataSourcesTable = new javax.swing.JTable();
        ingestJobsScrollPane = new javax.swing.JScrollPane();
        ingestJobsTable = new javax.swing.JTable();
        fileCountsScrollPane = new javax.swing.JScrollPane();
        fileCountsTable = new javax.swing.JTable();
        opperatingSystemLabel = new javax.swing.JLabel();
        opperatingSystemValueLabel = new javax.swing.JLabel();
        fileCountsLabel = new javax.swing.JLabel();
        ingestJobsLabel = new javax.swing.JLabel();
        ingestHistoryDetailsLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        ingestHistoryButton = new javax.swing.JButton();

        dataSourcesTable.setModel(dataSourceTableModel);
        dataSourcesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dataSourcesScrollPane.setViewportView(dataSourcesTable);

        ingestJobsTable.setModel(ingestJobTableModel);
        ingestJobsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ingestJobsScrollPane.setViewportView(ingestJobsTable);

        fileCountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Images", "0"},
                {"Videos", "0"},
                {"Audio", "0"},
                {"Documents", "0"},
                {"Executables", "0"}
            },
            new String [] {
                "File type", "Count"
            }
        ));
        fileCountsScrollPane.setViewportView(fileCountsTable);

        org.openide.awt.Mnemonics.setLocalizedText(opperatingSystemLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.opperatingSystemLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(opperatingSystemValueLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.opperatingSystemValueLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileCountsLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.fileCountsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ingestJobsLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.ingestJobsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ingestHistoryDetailsLabel, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.ingestHistoryDetailsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(closeButton, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.closeButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openButton, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.openButton.text")); // NOI18N
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ingestHistoryButton, org.openide.util.NbBundle.getMessage(DataSourceSummaryPanel.class, "DataSourceSummaryPanel.ingestHistoryButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataSourcesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fileCountsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(opperatingSystemLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(opperatingSystemValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(fileCountsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ingestHistoryDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ingestHistoryButton))
                            .addComponent(ingestJobsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ingestJobsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, ingestHistoryButton, openButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(dataSourcesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileCountsLabel)
                    .addComponent(ingestJobsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileCountsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opperatingSystemLabel)
                            .addComponent(opperatingSystemValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ingestJobsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingestHistoryButton)
                            .addComponent(ingestHistoryDetailsLabel))
                        .addGap(10, 10, 10)))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(openButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Adds an action listener to the Close button of the panel.
     *
     * @param action
     */
    void addCloseButtonAction(ActionListener action) {
        this.closeButton.addActionListener(action);
    }

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane dataSourcesScrollPane;
    private javax.swing.JTable dataSourcesTable;
    private javax.swing.JLabel fileCountsLabel;
    private javax.swing.JScrollPane fileCountsScrollPane;
    private javax.swing.JTable fileCountsTable;
    private javax.swing.JButton ingestHistoryButton;
    private javax.swing.JLabel ingestHistoryDetailsLabel;
    private javax.swing.JLabel ingestJobsLabel;
    private javax.swing.JScrollPane ingestJobsScrollPane;
    private javax.swing.JTable ingestJobsTable;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel opperatingSystemLabel;
    private javax.swing.JLabel opperatingSystemValueLabel;
    // End of variables declaration//GEN-END:variables

    @Messages({"DataSourceSummaryPanel.IngestJobTableModel.StartTime.header=Start Time",
        "DataSourceSummaryPanel.IngestJobTableModel.EndTime.header=End Time",
        "DataSourceSummaryPanel.IngestJobTableModel.IngestStatus.header=Ingest Status"})
    private class IngestJobTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;

        private final List<String> columnHeaders = new ArrayList<>();

        IngestJobTableModel() {
            columnHeaders.add(Bundle.DataSourceSummaryPanel_IngestJobTableModel_StartTime_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_IngestJobTableModel_EndTime_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_IngestJobTableModel_IngestStatus_header());
        }

        @Override
        public int getRowCount() {
            return ingestJobs.size();
        }

        @Override
        public int getColumnCount() {
            return columnHeaders.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            IngestJobInfo currIngestJob = ingestJobs.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return datetimeFormat.format(currIngestJob.getStartDateTime());
                case 1:
                    Date endDate = currIngestJob.getEndDateTime();
                    if (endDate.getTime() == 0) {
                        return "N/A";
                    }
                    return datetimeFormat.format(currIngestJob.getEndDateTime());
                case 2:
                    return currIngestJob.getStatus().getDisplayName();
                default:
                    break;
            }
            return null;
        }

        @Override
        public String getColumnName(int column) {
            return columnHeaders.get(column);
        }

    }

    @Messages({"DataSourceSummaryPanel.DataSourceTableModel.dataSourceName.header=Data Source Name",
        "DataSourceSummaryPanel.DataSourceTableModel.type.header=Type",
        "DataSourceSummaryPanel.DataSourceTableModel.files.header=Files",
        "DataSourceSummaryPanel.DataSourceTableModel.results.header=Results",
        "DataSourceSummaryPanel.DataSourceTableModel.tags.header=Tags"})
    private class DataSourceTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;

        private final List<String> columnHeaders = new ArrayList<>();

        DataSourceTableModel() {
            columnHeaders.add(Bundle.DataSourceSummaryPanel_DataSourceTableModel_dataSourceName_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_DataSourceTableModel_type_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_DataSourceTableModel_files_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_DataSourceTableModel_results_header());
            columnHeaders.add(Bundle.DataSourceSummaryPanel_DataSourceTableModel_tags_header());
        }

        @Override
        public int getRowCount() {
            return dataSources.size();
        }

        @Override
        public int getColumnCount() {
            return columnHeaders.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            DataSource currentDataSource = dataSources.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return currentDataSource.getName();
                case 1:
                    return "";
                case 2:
                    return getCountOfFiles(currentDataSource);
                case 3: 
                    return getCountOfArtifacts(currentDataSource);
                case 4:
                    return getCountOfTags(currentDataSource);
                default:
                    break;
            }
            return null;
        }

        private long getCountOfFiles(DataSource currentDataSource) {
            try {
                SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
                return skCase.countFilesWhere("data_source_obj_id=" + currentDataSource.getId()
                        + " AND type<>" + TskData.TSK_DB_FILES_TYPE_ENUM.VIRTUAL_DIR.getFileType()
                        + " AND dir_type<>" + TskData.TSK_FS_NAME_TYPE_ENUM.VIRT_DIR.getValue()
                        + " AND name<>''");
            } catch (TskCoreException | NoCurrentCaseException ex) {
                return 0;
            }
        }

        private long getCountOfArtifacts(DataSource currentDataSource) {
            try {
                SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
                return skCase.getBlackboardArtifactsCountForDatasource(currentDataSource.getId());
            } catch (TskCoreException | NoCurrentCaseException ex) {
                return 0;
            }
        }

        private long getCountOfTags(DataSource currentDataSource) {
            long countOfTags = 0;
            try {
                SleuthkitCase skCase = Case.getCurrentCaseThrows().getSleuthkitCase();
                countOfTags = skCase.getBlackboardArtifactTagsCountForDataSource(currentDataSource.getId());
                countOfTags += skCase.getContentTagsCountForDataSource(currentDataSource.getId());
            } catch (TskCoreException | NoCurrentCaseException ex) {
            }
            return countOfTags;
        }

        @Override
        public String getColumnName(int column) {
            return columnHeaders.get(column);
        }

    }

}
