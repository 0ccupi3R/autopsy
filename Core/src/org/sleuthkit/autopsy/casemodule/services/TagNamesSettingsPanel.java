/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011-2016 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.casemodule.services;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.corecomponents.OptionsPanel;
import org.sleuthkit.autopsy.coreutils.Logger;

/**
 * A panel to allow the user to create new tag names or to delete tag names that
 * user has created in the past. List of user tag names is maintained in a
 * properties file, able to be used across cases. Potentially room to add other
 * tag name options in the future.
 */
final class TagNamesSettingsPanel extends javax.swing.JPanel implements OptionsPanel {

    private static final long serialVersionUID = 1L;
    private static final String DEFAULT_DESCRIPTION = "";
    private static final String DEFAULT_COLOR_STRING = "NONE";
    private final DefaultListModel<TagType> tagTypesListModel;
    private final Set<TagType> tagTypes;

    /**
     * Creates new form TagsManagerOptionsPanel
     */
    TagNamesSettingsPanel() {
        tagTypesListModel = new DefaultListModel<>();
        tagTypes = new TreeSet<>(TagType.getCustomTagTypes());
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        tagNamesList.setModel(tagTypesListModel);
        tagNamesList.addListSelectionListener((ListSelectionEvent event) -> {
            enableButtons();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelDescriptionLabel = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        modifyTagNameListPanel = new javax.swing.JPanel();
        tagNamesListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagNamesList = new javax.swing.JList<>();
        newTagNameButton = new javax.swing.JButton();
        deleteTagNameButton = new javax.swing.JButton();
        tagNameAdditionalPanel = new javax.swing.JPanel();

        jPanel1.setPreferredSize(new java.awt.Dimension(750, 500));

        org.openide.awt.Mnemonics.setLocalizedText(panelDescriptionLabel, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.panelDescriptionLabel.text")); // NOI18N

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setDividerSize(1);

        org.openide.awt.Mnemonics.setLocalizedText(tagNamesListLabel, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.tagNamesListLabel.text")); // NOI18N

        tagNamesList.setModel(new javax.swing.AbstractListModel<UserTagName>() {
            String[] strings = { "TagType" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tagNamesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tagNamesList);

        newTagNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add-tag.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newTagNameButton, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.newTagNameButton.text")); // NOI18N
        newTagNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTagNameButtonActionPerformed(evt);
            }
        });

        deleteTagNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/delete-tag.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteTagNameButton, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.deleteTagNameButton.text")); // NOI18N
        deleteTagNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTagNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modifyTagNameListPanelLayout = new javax.swing.GroupLayout(modifyTagNameListPanel);
        modifyTagNameListPanel.setLayout(modifyTagNameListPanelLayout);
        modifyTagNameListPanelLayout.setHorizontalGroup(
            modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tagNamesListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                        .addComponent(newTagNameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteTagNameButton)
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        modifyTagNameListPanelLayout.setVerticalGroup(
            modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagNamesListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newTagNameButton)
                    .addComponent(deleteTagNameButton))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(modifyTagNameListPanel);

        javax.swing.GroupLayout tagNameAdditionalPanelLayout = new javax.swing.GroupLayout(tagNameAdditionalPanel);
        tagNameAdditionalPanel.setLayout(tagNameAdditionalPanelLayout);
        tagNameAdditionalPanelLayout.setHorizontalGroup(
            tagNameAdditionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        tagNameAdditionalPanelLayout.setVerticalGroup(
            tagNameAdditionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 456, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(tagNameAdditionalPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1)
                    .addComponent(panelDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newTagNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTagNameButtonActionPerformed
        NewUserTagNameDialog dialog = new NewUserTagNameDialog();
        NewUserTagNameDialog.BUTTON_PRESSED result = dialog.getResult();
        if (result == NewUserTagNameDialog.BUTTON_PRESSED.OK) {
            String newTagDisplayName = dialog.getTagName();
            TagType newTagType = new TagType(newTagDisplayName, DEFAULT_DESCRIPTION, DEFAULT_COLOR_STRING);
            /*
             * If tag name already exists, don't add the tag name.
             */
            if (tagTypes.contains(newTagType)) {
                JOptionPane.showMessageDialog(null,
                        NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.JOptionPane.tagNameAlreadyExists.message"),
                        NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.JOptionPane.tagNameAlreadyExists.title"),
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                tagTypes.add(newTagType);
                updateTagNamesListModel();
                /*
                 * Set the selection to the tag name that was just added.
                 */
                int index = tagTypes.indexOf(newTagType);
                tagNamesList.setSelectedIndex(index);
                enableButtons();
                firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            }
        }
    }//GEN-LAST:event_newTagNameButtonActionPerformed

    private void deleteTagNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTagNameButtonActionPerformed
        TagType tagName = tagNamesList.getSelectedValue();
        tagTypes.remove(tagName);
        updateTagNamesListModel();
        enableButtons();
        firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
    }//GEN-LAST:event_deleteTagNameButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteTagNameButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel modifyTagNameListPanel;
    private javax.swing.JButton newTagNameButton;
    private javax.swing.JLabel panelDescriptionLabel;
    private javax.swing.JPanel tagNameAdditionalPanel;
    private javax.swing.JList<UserTagName> tagNamesList;
    private javax.swing.JLabel tagNamesListLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the tag names model for the tag names list component.
     */
    private void updateTagNamesListModel() {
        tagTypesListModel.clear();
        Set<TagType> tagNameSet = new HashSet<>();
        tagNameSet.addAll(tagTypes);
        tagTypes.clear();
        tagTypes.addAll(tagNameSet);
        Collections.sort(tagTypes);
        for (TagType tagName : tagTypes) {
            tagTypesListModel.addElement(tagName);
        }
    }

    /**
     * Updates the tag names list component with tag names from the properties
     * file.
     */
    @Override
    public void load() {
        tagTypes = TagType.getCustomTagTypes();
        updateTagNamesListModel();
        enableButtons();
    }

    /**
     * Stores tag name changes in the properties file, called when OK or Apply
     * is selected in the options panel.
     *
     * Adds all new tag names to the case database for displaying usable tag
     * names when tagging.
     */
    @Override
    public void store() {
        TagType.setCustomTagTypes(tagTypes);
    }

    /**
     * Only enable the delete button when there is a tag type selected in the
     * tag types JList.
     */
    private void enableButtons() {
        deleteTagNameButton.setEnabled(tagNamesList.getSelectedIndex() != -1);
    }

}
