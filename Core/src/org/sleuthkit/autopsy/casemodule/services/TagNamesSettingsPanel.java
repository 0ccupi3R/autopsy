/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package org.sleuthkit.autopsy.casemodule.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.corecomponents.OptionsPanel;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.coreutils.ModuleSettings;

/**
 * A panel to allow the user to create new tag names or to delete tag names that
 * user has created in the past. List of user tag names is maintained in a
 * properties file, able to be used across cases. Potentially room to add other
 * tag name options in the future.
 */
public class TagNamesSettingsPanel extends javax.swing.JPanel implements OptionsPanel {

    private static final Logger logger = Logger.getLogger(TagNamesSettingsPanel.class.getName());

    private static final String TAGS_SETTINGS_NAME = "Tags"; //NON-NLS
    private static final String TAG_NAMES_SETTING_KEY = "TagNames"; //NON-NLS

    private static final String TAG_BOOKMARK = "Bookmark";

    private static final String DEFAULT_DESCRIPTION = "";
    private static final String DEFAULT_COLOR_STRING = "NONE";

    private DefaultListModel<UserTagName> tagNamesListModel;
    private List<UserTagName> tagNames;

    /**
     * Creates new form TagsManagerOptionsPanel
     */
    public TagNamesSettingsPanel() {
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        tagNamesListModel = new DefaultListModel<>();
        tagNamesList.setModel(tagNamesListModel);
        tagNames = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelDescriptionLabel = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        modifyTagNameListPanel = new javax.swing.JPanel();
        tagNamesListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagNamesList = new javax.swing.JList<>();
        addTagNameButton = new javax.swing.JButton();
        deleteTagNameButton = new javax.swing.JButton();
        tagNameAdditionalPanel = new javax.swing.JPanel();

        jPanel1.setPreferredSize(new java.awt.Dimension(750, 500));

        org.openide.awt.Mnemonics.setLocalizedText(panelDescriptionLabel, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.panelDescriptionLabel.text")); // NOI18N

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setDividerSize(1);

        org.openide.awt.Mnemonics.setLocalizedText(tagNamesListLabel, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.tagNamesListLabel.text")); // NOI18N

        tagNamesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagNamesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tagNamesList);

        addTagNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add-tag.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addTagNameButton, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.addTagNameButton.text")); // NOI18N
        addTagNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagNameButtonActionPerformed(evt);
            }
        });

        deleteTagNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/delete-tag.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteTagNameButton, org.openide.util.NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.deleteTagNameButton.text")); // NOI18N
        deleteTagNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTagNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modifyTagNameListPanelLayout = new javax.swing.GroupLayout(modifyTagNameListPanel);
        modifyTagNameListPanel.setLayout(modifyTagNameListPanelLayout);
        modifyTagNameListPanelLayout.setHorizontalGroup(
            modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tagNamesListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                        .addComponent(addTagNameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteTagNameButton)
                        .addGap(0, 115, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        modifyTagNameListPanelLayout.setVerticalGroup(
            modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTagNameListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagNamesListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyTagNameListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTagNameButton)
                    .addComponent(deleteTagNameButton))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(modifyTagNameListPanel);

        javax.swing.GroupLayout tagNameAdditionalPanelLayout = new javax.swing.GroupLayout(tagNameAdditionalPanel);
        tagNameAdditionalPanel.setLayout(tagNameAdditionalPanelLayout);
        tagNameAdditionalPanelLayout.setHorizontalGroup(
            tagNameAdditionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        tagNameAdditionalPanelLayout.setVerticalGroup(
            tagNameAdditionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 456, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(tagNameAdditionalPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1)
                    .addComponent(panelDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addTagNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagNameButtonActionPerformed
        NewUserTagNameDialog dialog = new NewUserTagNameDialog();
        NewUserTagNameDialog.BUTTON_PRESSED result = dialog.getResult();
        if (result == NewUserTagNameDialog.BUTTON_PRESSED.OK) {
            String newTagDisplayName = dialog.getTagName();
            UserTagName newTagName = new UserTagName(newTagDisplayName, DEFAULT_DESCRIPTION, DEFAULT_COLOR_STRING);
            if (tagNames.contains(newTagName)) {
                JOptionPane.showMessageDialog(null,
                        NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.JOptionPane.tagNameAlreadyExists.message"),
                        NbBundle.getMessage(TagNamesSettingsPanel.class, "TagNamesSettingsPanel.JOptionPane.tagNameAlreadyExists.title"),
                        JOptionPane.ERROR_MESSAGE);
            } else {
                tagNames.add(newTagName);
                updateTagNamesListModel();
                tagNamesList.setSelectedIndex(tagNames.size() - 1);
                enableButtons();
                firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            }
        }
    }//GEN-LAST:event_addTagNameButtonActionPerformed

    private void deleteTagNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTagNameButtonActionPerformed
        UserTagName tagName = tagNamesList.getSelectedValue();
        tagNames.remove(tagName);
        updateTagNamesListModel();
        firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
    }//GEN-LAST:event_deleteTagNameButtonActionPerformed

    private void tagNamesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagNamesListMouseClicked
        enableButtons();
    }//GEN-LAST:event_tagNamesListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTagNameButton;
    private javax.swing.JButton deleteTagNameButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel modifyTagNameListPanel;
    private javax.swing.JLabel panelDescriptionLabel;
    private javax.swing.JPanel tagNameAdditionalPanel;
    private javax.swing.JList<UserTagName> tagNamesList;
    private javax.swing.JLabel tagNamesListLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the tag names model for the tag names list component.
     */
    private void updateTagNamesListModel() {
        tagNamesListModel.clear();
        Collections.sort(tagNames);
        for (UserTagName tagName : tagNames) {
            tagNamesListModel.addElement(tagName);
        }
    }

    /**
     * Stores tag name changes in the properties file, called when OK or Apply
     * is selected in the OptionsPanel.
     *
     * Adds all new tag names to the case database for use.
     */
    @Override
    public void store() {
        //Case.getCurrentCase().getServices().getTagsManager().saveUserTagNames(tagNames);
        StringBuilder setting = new StringBuilder();
        for (UserTagName tagName : tagNames) {
            if (setting.length() != 0) {
                setting.append(";");
            }
            setting.append(tagName.toSettingsFormat());
        }
        ModuleSettings.setConfigSetting(TAGS_SETTINGS_NAME, TAG_NAMES_SETTING_KEY, setting.toString());
        if (Case.isCaseOpen()) {
            Case.getCurrentCase().getServices().getTagsManager().storeNewUserTagNames(tagNames);
        }
    }
    
    /**
     * Updates the tag names list component with tag names from the properties
     * file.
     */
    @Override
    public void load() {
        //tagNames = Case.getCurrentCase().getServices().getTagsManager().getUserTagNames();
        String setting = ModuleSettings.getConfigSetting(TAGS_SETTINGS_NAME, TAG_NAMES_SETTING_KEY);
        tagNames.clear();
        if (null != setting && !setting.isEmpty()) {
            List<String> tagNameTuples = Arrays.asList(setting.split(";"));
            for (String tagNameTuple : tagNameTuples) {
                String[] tagNameAttributes = tagNameTuple.split(",");
                    tagNames.add(new UserTagName(tagNameAttributes[0], tagNameAttributes[1], tagNameAttributes[2]));
                }
            }
        updateTagNamesListModel();
        enableButtons();
    }
    
    private void enableButtons() {
        boolean ruleIsSelected = tagNamesList.getSelectedIndex() != -1;
        deleteTagNameButton.setEnabled(ruleIsSelected);
    }
    
   
}
