/*
 * 
 * Autopsy Forensic Browser
 * 
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.commonfilesearch;

import java.util.Map;
import org.sleuthkit.autopsy.datamodel.DisplayableItemNode;
import org.sleuthkit.datamodel.AbstractFile;

/**
 * Defines leaf-type nodes used in the Common Files Search results tree.
 * Leaf nodes, may describe common attributes which exist in the current case DB 
 * or in the Central Repo.  When a reference to the AbstractFile is lacking 
 * (such as in the case that a common attribute is found in the Central Repo) 
 * not all features of the Content Viewer, and context menu can be supported.  
 * Thus, multiple types of leaf nodes are required to represent Common Attribute 
 * Instance nodes.
 */
public abstract class AbstractCommonAttributeInstanceNode {

    protected Long abstractFileObjectId;
    protected Map<Long, AbstractFile> cachedFiles;
    String caseName;
    String dataSource;

    /**
     * Create a leaf node for attributes found in files in the current case db.
     * 
     * @param abstractFileReference file from which the common attribute was found
     * @param cachedFiles storage for abstract files which have been used already so we can avoid extra roundtrips to the case db
     * @param dataSource datasource where this attribute appears
     * @param caseName case where this attribute appears
     */
    public AbstractCommonAttributeInstanceNode(Long abstractFileReference, Map<Long, AbstractFile> cachedFiles, String dataSource, String caseName) {
        this.abstractFileObjectId = abstractFileReference;
        this.cachedFiles = cachedFiles;
        this.caseName = caseName;
        this.dataSource = dataSource;
    }
    
    /**
     * Create a leaf node for attributes found in the central repo and not 
     * available in the current data case.
     * 
     * @param cachedFiles storage for abstract files which have been used already so we can avoid extra roundtrips to the case db
     */
    public AbstractCommonAttributeInstanceNode(Map<Long, AbstractFile> cachedFiles) {
        this.cachedFiles = cachedFiles;
        this.caseName = "";
        this.dataSource = "";
    }

    /**
     * Grab a cached instance of the AbstractFile or grab one from the
     * SleuthkitCase. Use this in implementations of <code>generateNodes</code>.
     * 
     * @return AbstractFile which is identical to the file instance generated by
     * implementations of this object
     */
    protected AbstractFile lookupOrCreateAbstractFile() {
        if (cachedFiles.containsKey(this.abstractFileObjectId)) {
            return cachedFiles.get(this.abstractFileObjectId);
        } else {
            AbstractFile file = this.loadFileFromSleuthkitCase();
            cachedFiles.put(this.abstractFileObjectId, file);
            return file;
        }
    }

    /**
     * Implement this in subclasses to find the AbstractFile by whatever means
     * necessary.  This will be called by this.lookupOrCreateAbstractFile.  In 
     * some cases we may have the object id, in other cases we may need to use
     * something else.
     * 
     * @return AbstractFile corresponding to this common attribute
     */
    abstract protected AbstractFile loadFileFromSleuthkitCase();
    
    /**
     * Create a list of leaf nodes, to be used to display a
     * row in the tree table
     *
     * @return leaf nodes for tree
     */
    public abstract DisplayableItemNode[] generateNodes();

    public String getCaseName() {
        return this.caseName;
    }

    /**
     * Get string name of the data source where this common attribute appears.
     *
     * @return data source name
     */
    public String getDataSource() {

        /**
         * Even though we could get this from the CR record or the AbstractFile,
         * we want to avoid getting it from the AbstractFile because it would be
         * an extra database roundtrip.
         */
        return this.dataSource;
    }
}
