/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sleuthkit.autopsy.contentviewers;

import java.awt.Component;
import java.util.List;
import org.sleuthkit.datamodel.AbstractFile;
import java.util.Arrays;
import java.util.HashMap;
import com.dd.plist.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.TskCoreException;


public class PListViewer extends javax.swing.JPanel implements FileTypeViewer {

    public static final String[] SUPPORTED_MIMETYPES = new String[]{"application/x-bplist"};
    private static final Logger LOGGER = Logger.getLogger(PListViewer.class.getName());
    
    /**
     * Creates new form PListViewer
     */
    public PListViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public List<String> getSupportedMIMETypes() {
         return Arrays.asList(SUPPORTED_MIMETYPES);
    }

    @Override
    public void setFile(AbstractFile file) {
        processPlist(file);
    }

    @Override
    public Component getComponent() {
       return this;
    }

    @Override
    public void resetComponent() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        
        // RAMAN TBD
    }

    
    /**
     * Process the given Plist file
     *
     * @param plistFile -
     *
     * @return none
     */
    private void processPlist(AbstractFile plistFile) {
        System.out.println("Got plist file = " + plistFile.getName());
        
         
            byte[] buf = new byte[(int) plistFile.getSize()];
            try {
                final int bytesRead = plistFile.read(buf, 0, plistFile.getSize());
            } catch (TskCoreException ex) {
                LOGGER.log(Level.SEVERE, "Error reading bytes of plist file.", ex);
            }
            
        List<PropKeyValue> plist = parsePList(buf);
        
        System.out.println("List size = " + plist.size());
        
        // RAMAN TBD: populate the display table 
        for (PropKeyValue pkv : plist) {
            printValue(pkv);
        }
        
    }
    
    private void printValue(PropKeyValue pkv) {
        if (pkv == null) {
            return;
        }
        
        System.out.println("");
        System.out.println("Key = " + pkv.getKey());
        String type = pkv.getType();
        System.out.println("Value Type = " + type);
        
        if (type.equalsIgnoreCase("array")) {
            
            System.out.println("BEGIN Array");
            List<PropKeyValue> array = (List<PropKeyValue>)pkv.getValue();
            for (int i = 0; i < array.size(); i++) {
                printValue(array.get(i));
            }
            System.out.println("End Array");
        }
        else if (type.equalsIgnoreCase("Dictionary")) {
            
            System.out.println("BEGIN Dictionary");
            List<PropKeyValue> dict = (List<PropKeyValue>)pkv.getValue();
            
            for (PropKeyValue pkv2 : dict) {
                printValue(pkv2);
            }
            
            System.out.println("End Dictionary");
            
        } else {
            System.out.println("Value = " + pkv.getValue().toString());
        }
       
    }
    private <T> PropKeyValue<T> castValue(String key, NSObject value) {
        if (value == null) {
            return null;
        } else if (value instanceof NSString) {
            return new PropKeyValue(key, "String", (T) value.toString());
            //return (T) value.toString();
        } else if (value instanceof NSNumber) {
            NSNumber number = (NSNumber) value;
            if (number.isInteger()) {
                return new PropKeyValue(key, "Number", (T) new Long(number.longValue()) );
                //return (T) new Long(number.longValue());
            } else if (number.isBoolean()) {
                return new PropKeyValue(key, "Boolean", (T) new Boolean(number.boolValue()) );
                //return (T) new Boolean(number.boolValue());
            } else {
                // TODO can be long, float or double 
                return new PropKeyValue(key, "Number", (T) new Float(number.floatValue())) ;
                //return (T) new Float(number.floatValue());
            }
        } else if (value instanceof NSArray) {
            List<PropKeyValue<T>> res = new ArrayList<>();
            NSArray array = (NSArray) value;
            for (int i = 0; i < array.count(); i++) {
                res.add(castValue("", array.objectAtIndex(i)));
                //res.add((T) castValue(array.objectAtIndex(i)));
            }
            
            return new PropKeyValue(key, "Array", (T) res);
            
            //return (T) res;
        } else if (value instanceof NSDictionary) {
            List<PropKeyValue> dict = new ArrayList<PropKeyValue>();
            for (String key2 : ((NSDictionary) value).allKeys()) {
                NSObject o = ((NSDictionary) value).objectForKey(key2);
                dict.add(castValue(key2, o));
            }
             return new PropKeyValue(key, "Dictionary", (T) dict);
            //return (T) res;
        } else {
            LOGGER.severe("Can't cast from " + value.getClass());
        }
        
        return null;
    }
    
    private List<PropKeyValue> parsePList(byte[] plistbytes) {

        List<PropKeyValue> plist = new ArrayList<>();

        try {
            NSDictionary rootDict = (NSDictionary) PropertyListParser.parse(plistbytes);

            String[] keys = rootDict.allKeys();

            for (int i = 0; i < keys.length; i++) {

                NSObject object = rootDict.objectForKey(keys[i]);
                
                System.out.println("");       
                System.out.println("Found Key = " + keys[i]);
                System.out.println("Value class = " + object.getClass().toString());
                   
                PropKeyValue pkv = castValue(keys[i], rootDict.objectForKey(keys[i]));
                if (null != pkv) { 
                    plist.add(pkv);
                    
                    //System.out.println("Value = " + pvalue.toString());
                }
                 
                /****
                if (object.getClass().equals(NSNumber.class)) {
                    NSNumber num = (NSNumber) object;

                    System.out.println("Value  type = " + num.type() + ", Value = " + rootDict.objectForKey(keys[i]));

                    switch (num.type()) {
                        case NSNumber.BOOLEAN: {
                            boolean bool = num.boolValue();
                            map.put(keys[i], new Boolean(bool));
                            break;
                        }
                        case NSNumber.INTEGER: {
                            long l = num.longValue();
                            map.put(keys[i], new Long(l));
                            break;
                        }
                        case NSNumber.REAL: {
                            double d = num.doubleValue();
                            map.put(keys[i], new Double(d));
                            break;
                        }
                    }
                } else if (object.getClass().equals(NSString.class)) {

                    map.put(keys[i], object.toString());
                    System.out.println("Value  type is STRING, and Value = " + rootDict.objectForKey(keys[i]));
                } else if (object.getClass().equals(NSArray.class)) {
                    List<Object> res = new ArrayList<>();
                    NSArray array = (NSArray) rootDict.objectForKey(keys[i]);
                    for (int j = 0; i < array.count(); j++) {
                      res.add((T) cast(array.objectAtIndex(j)));
                    }
                    
                    map.put(keys[i], res);
                   
                  } else if (value instanceof NSDictionary) {
                    Map<String, Object> res = new HashMap<String, Object>();
                    for (String key : ((NSDictionary) value).allKeys()) {
                      NSObject o = ((NSDictionary) value).objectForKey(key);
                      res.put(key, cast(o));
                    }
                    return (T) res;
                  } 
                else {
                    map.put(keys[i], object);
                    System.out.println("Value type is COMPLEX, and Value = " + rootDict.objectForKey(keys[i]));
                }
                *******/

            }

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

        return plist;
    }
    
    /**
     * 
     *
     * @param <T> the type of the value 
     */
    public class PropKeyValue<T> {
        // T stands for "Type"

        private String key;
        private String type;
        private T value;

        PropKeyValue(String key, String type, T value) {
            this.key = key;
            this.type = type;
            this.value = value;
        }
        
        String getKey() {
            return this.key;
        }
        String getType() {
            return this.type;
        }
        
        T getValue() {
            return this.value;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
