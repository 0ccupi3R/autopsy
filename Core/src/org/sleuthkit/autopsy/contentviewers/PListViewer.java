/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sleuthkit.autopsy.contentviewers;

import java.awt.Component;
import java.util.List;
import org.sleuthkit.datamodel.AbstractFile;
import java.util.Arrays;
import java.util.HashMap;
import com.dd.plist.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.TskCoreException;


public class PListViewer extends javax.swing.JPanel implements FileTypeViewer {

    public static final String[] SUPPORTED_MIMETYPES = new String[]{"application/x-bplist"};
    private static final Logger LOGGER = Logger.getLogger(PListViewer.class.getName());
    
    /**
     * Creates new form PListViewer
     */
    public PListViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public List<String> getSupportedMIMETypes() {
         return Arrays.asList(SUPPORTED_MIMETYPES);
    }

    @Override
    public void setFile(AbstractFile file) {
        processPlist(file);
    }

    @Override
    public Component getComponent() {
       return this;
    }

    @Override
    public void resetComponent() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        
        // RAMAN TBD
    }

    
    /**
     * Process the given Plist file
     *
     * @param plistFile -
     *
     * @return none
     */
    private void processPlist(AbstractFile plistFile) {
        System.out.println("Got plist file = " + plistFile.getName());
        
         
            byte[] buf = new byte[(int) plistFile.getSize()];
            try {
                final int bytesRead = plistFile.read(buf, 0, plistFile.getSize());
            } catch (TskCoreException ex) {
                LOGGER.log(Level.SEVERE, "Error reading bytes of plist file.", ex);
            }
            
        HashMap<String, Object> map = parsePList(buf);
        
        System.out.println("Map size = " + map.size());
        
        // RAMAN TBD: populate the display table 
        for (String key : map.keySet()) {
            printValue(key, map.get(key));
        }
        
    }
    
    private void printValue(String key, Object value) {
        if (value == null) {
            return;
        }
        
        System.out.println("");
        System.out.println("Key = " + key);
        System.out.println("Value Type = " + value.getClass().getSimpleName());
        System.out.println("Value = " + value.toString());
        
        // TBD: handle the array and Dictionary type
       
    }
    private <T> T castValue(NSObject value) {
        if (value == null) {
            return null;
        } else if (value instanceof NSString) {
            return (T) value.toString();
        } else if (value instanceof NSNumber) {
            NSNumber number = (NSNumber) value;
            if (number.isInteger()) {
                return (T) new Long(number.longValue());
            } else if (number.isBoolean()) {
                return (T) new Boolean(number.boolValue());
            } else {
                // TODO can be long, float or double 
                return (T) new Float(number.floatValue());
            }
        } else if (value instanceof NSArray) {
            List<T> res = new ArrayList<T>();
            NSArray array = (NSArray) value;
            for (int i = 0; i < array.count(); i++) {
                res.add((T) castValue(array.objectAtIndex(i)));
            }
            return (T) res;
        } else if (value instanceof NSDictionary) {
            Map<String, Object> res = new HashMap<String, Object>();
            for (String key : ((NSDictionary) value).allKeys()) {
                NSObject o = ((NSDictionary) value).objectForKey(key);
                res.put(key, castValue(o));
            }
            return (T) res;
        } else {
            LOGGER.severe("Can't cast from " + value.getClass());
        }
        
        return null;
    }
    
    private  HashMap<String, Object> parsePList(byte[] plistbytes) {

        HashMap<String, Object> map = new HashMap<>();

        try {
            NSDictionary rootDict = (NSDictionary) PropertyListParser.parse(plistbytes);

            String[] keys = rootDict.allKeys();

            for (int i = 0; i < keys.length; i++) {

                NSObject object = rootDict.objectForKey(keys[i]);
                
                System.out.println("");       
                System.out.println("Found Key = " + keys[i]);
                System.out.println("Value class = " + object.getClass().toString());
                   
                Object value = castValue(rootDict.objectForKey(keys[i]));
                if (null != value) { 
                    map.put(keys[i], value);
                    
                    System.out.println("Value = " + value.toString());
                }
                 
                /****
                if (object.getClass().equals(NSNumber.class)) {
                    NSNumber num = (NSNumber) object;

                    System.out.println("Value  type = " + num.type() + ", Value = " + rootDict.objectForKey(keys[i]));

                    switch (num.type()) {
                        case NSNumber.BOOLEAN: {
                            boolean bool = num.boolValue();
                            map.put(keys[i], new Boolean(bool));
                            break;
                        }
                        case NSNumber.INTEGER: {
                            long l = num.longValue();
                            map.put(keys[i], new Long(l));
                            break;
                        }
                        case NSNumber.REAL: {
                            double d = num.doubleValue();
                            map.put(keys[i], new Double(d));
                            break;
                        }
                    }
                } else if (object.getClass().equals(NSString.class)) {

                    map.put(keys[i], object.toString());
                    System.out.println("Value  type is STRING, and Value = " + rootDict.objectForKey(keys[i]));
                } else if (object.getClass().equals(NSArray.class)) {
                    List<Object> res = new ArrayList<>();
                    NSArray array = (NSArray) rootDict.objectForKey(keys[i]);
                    for (int j = 0; i < array.count(); j++) {
                      res.add((T) cast(array.objectAtIndex(j)));
                    }
                    
                    map.put(keys[i], res);
                   
                  } else if (value instanceof NSDictionary) {
                    Map<String, Object> res = new HashMap<String, Object>();
                    for (String key : ((NSDictionary) value).allKeys()) {
                      NSObject o = ((NSDictionary) value).objectForKey(key);
                      res.put(key, cast(o));
                    }
                    return (T) res;
                  } 
                else {
                    map.put(keys[i], object);
                    System.out.println("Value type is COMPLEX, and Value = " + rootDict.objectForKey(keys[i]));
                }
                *******/

            }

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

        return map;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
