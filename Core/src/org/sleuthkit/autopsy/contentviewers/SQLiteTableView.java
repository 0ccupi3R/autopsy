/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.contentviewers;

import java.util.ArrayList;
import java.util.Map;
import java.util.Objects;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;
import org.netbeans.swing.etable.ETableColumn;
import org.netbeans.swing.etable.ETableColumnModel;
import org.netbeans.swing.outline.Outline;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;


public class SQLiteTableView extends javax.swing.JPanel implements ExplorerManager.Provider {

    private final Outline outline;
    private final org.openide.explorer.view.OutlineView outlineView;
    private ExplorerManager explorerManager;

    private final ArrayList<Map<String, Object>> tableRows;
    
    /**
     * Creates new form SQLiteTableView
     * @param rows
     */
    public SQLiteTableView(ArrayList<Map<String, Object>> rows) {
        
        this.tableRows = rows;
        
        outlineView = new org.openide.explorer.view.OutlineView();
         
        initComponents();
        
        outline = outlineView.getOutline();
        outlineView.setPropertyColumns();   // column headers will be set later
        outline.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        customize();
    }

    private void customize() {
      
        tableScrollPane.setViewportView(outlineView);
        this.setVisible(true);
        outline.setRowSelectionAllowed(false);
        outline.setRootVisible(false); 
     
        explorerManager = new ExplorerManager();
        explorerManager.setRootContext(new AbstractNode(Children.create(new SQLiteTableRowFactory(tableRows), true)));
        
        setupColumns();
    }
    
    /**
     * Sets up the columns in the display table
     */
    private void setupColumns() {
        if (Objects.isNull(tableRows) || tableRows.isEmpty()) 
            return;
            
        Map<String, Object> row = tableRows.get(0);
                
        // Get the columns setup with respect to names and sortability
        String[] propStrings = new String[row.size() * 2];
        
        int i = 0;
        for (Map.Entry<String, Object > col: row.entrySet()) {
                String colName = col.getKey();
                propStrings[2 * i] = colName;
                propStrings[2 * i + 1] = colName;
                i++;
        }
         
        
        outlineView.setPropertyColumns(propStrings);
        
        // RAMAN TBD: Set width based on actual data in the top N rows??
        // TBD: Cant seem to geta horizontal scroll bar
        for (int col = 0; col< outline.getModel().getColumnCount(); col++) {
            outline.getColumnModel().getColumn(col).setMinWidth(50);
        }
        
        // Hide the 'Nodes' column
        TableColumnModel columnModel = outline.getColumnModel();
        ETableColumn column = (ETableColumn) columnModel.getColumn(0);
        ((ETableColumnModel) columnModel).setColumnHidden(column, true);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScrollPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

               
 
    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
