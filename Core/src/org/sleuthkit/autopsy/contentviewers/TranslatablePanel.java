/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.contentviewers;

import org.apache.commons.lang.StringUtils;
import org.openide.util.NbBundle;
import javax.swing.JPanel;

/**
 * A JPanel used by TranslatedContentViewer to display machine translation of
 * text.
 */
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
final class TranslatablePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    private int lastSelectedIndex = 0;
    private final TranslatableJPanel contentPanel;
    private final String origOptionText;
    private final String translatedOptionText;
    
    static abstract class TranslatableJPanel extends JPanel {
        protected abstract String onTranslateChange(boolean translate);
    }
    
    /**
     * Creates new form TranslatedContentPanel
     */
    TranslatablePanel(TranslatableJPanel contentPanel, String origOptionText, String translatedOptionText) {
        this.contentPanel = contentPanel;
        this.origOptionText = origOptionText;
        this.translatedOptionText = translatedOptionText;
        
        initComponents();
        add(this.contentPanel, java.awt.BorderLayout.CENTER);
        reset();
        
    }

    
    void setWarningLabelMsg(String msg) {
        warningLabel.setText(msg);
        warningLabel.setVisible(StringUtils.isEmpty(msg));
    }

//        @Messages({"TranslatedContentPanel.comboBoxOption.originalText=Original Text (Up to 25KB)",
//        "TranslatedContentPanel.comboBoxOption.translatedText=Translated Text"})

        
    //@NbBundle.Messages({"TranslationContentPanel.autoDetectOCR=Autodetect language"})
    final void reset() {
        setWarningLabelMsg(null);
        displayTextComboBox.removeAllItems();
        displayTextComboBox.addItem(this.origOptionText);
        displayTextComboBox.addItem(this.translatedOptionText);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        displayTextComboBox = new javax.swing.JComboBox<>();
        warningLabel = new javax.swing.JLabel();
        showLabel = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(2000, 2000));
        setMinimumSize(new java.awt.Dimension(2, 2));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(100, 58));
        setVerifyInputWhenFocusTarget(false);
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(182, 24));
        jPanel1.setPreferredSize(new java.awt.Dimension(182, 24));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        displayTextComboBox.setMinimumSize(new java.awt.Dimension(43, 20));
        displayTextComboBox.setPreferredSize(new java.awt.Dimension(43, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(displayTextComboBox, gridBagConstraints);

        warningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/warning16.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.25;
        jPanel1.add(warningLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(showLabel, org.openide.util.NbBundle.getMessage(TranslatablePanel.class, "TranslatablePanel.showLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(showLabel, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> displayTextComboBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel showLabel;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}