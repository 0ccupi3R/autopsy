/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.corecomponents;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.sleuthkit.datamodel.CaseDbConnectionInfo;
import org.sleuthkit.datamodel.CaseDbConnectionInfo.DbType;
import org.sleuthkit.autopsy.core.UserPreferences;

public class MultiUserSettingsPanel extends javax.swing.JPanel {

    private MultiUserSettingsPanelController controller;
    private TextBoxChangedListener textBoxChangedListener;

    /**
     * Creates new form AutopsyMultiUserSettingsPanel
     */
    public MultiUserSettingsPanel(MultiUserSettingsPanelController theController) {
        initComponents();
        controller = theController;

        TextPrompt tpHostnameOrIp = new TextPrompt("Hostname or IP Address", tbHostnameOrIp);
        TextPrompt tpPortNumber = new TextPrompt("Port Number", tbPortNumber);
        TextPrompt tpUsername = new TextPrompt("User Name", tbUsername);
        TextPrompt tpPassword = new TextPrompt("Password", tbPassword);
        TextPrompt tpIndexingServerHost = new TextPrompt("Hostname or IP Address", tbIndexingServerHost);
        TextPrompt tpIndexingServerPort = new TextPrompt("Port Number", tbIndexingServerPort);
        

        tpHostnameOrIp.setForeground(Color.LIGHT_GRAY);
        tpPortNumber.setForeground(Color.LIGHT_GRAY);
        tpUsername.setForeground(Color.LIGHT_GRAY);
        tpPassword.setForeground(Color.LIGHT_GRAY);
        tpIndexingServerHost.setForeground(Color.LIGHT_GRAY);
        tpIndexingServerPort.setForeground(Color.LIGHT_GRAY);

        float alpha = 0.9f; // Mostly opaque
        tpHostnameOrIp.changeAlpha(alpha);
        tpPortNumber.changeAlpha(alpha);
        tpUsername.changeAlpha(alpha);
        tpPassword.changeAlpha(alpha);
        tpIndexingServerHost.changeAlpha(alpha);
        tpIndexingServerPort.changeAlpha(alpha);

        enableNetworkProperties(cbEnableMultiUser.isSelected());

        /// Register for notifications when the text boxes get updated
        textBoxChangedListener = new TextBoxChangedListener();
        tbHostnameOrIp.getDocument().addDocumentListener(textBoxChangedListener);
        tbPortNumber.getDocument().addDocumentListener(textBoxChangedListener);
        tbUsername.getDocument().addDocumentListener(textBoxChangedListener);
        tbPassword.getDocument().addDocumentListener(textBoxChangedListener);
        tbIndexingServerHost.getDocument().addDocumentListener(textBoxChangedListener);
        tbIndexingServerPort.getDocument().addDocumentListener(textBoxChangedListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnOverallPanel = new javax.swing.JPanel();
        pnDatabaseSettings = new javax.swing.JPanel();
        tbHostnameOrIp = new javax.swing.JTextField();
        tbPortNumber = new javax.swing.JTextField();
        tbUsername = new javax.swing.JTextField();
        tbPassword = new javax.swing.JPasswordField();
        lbOops = new javax.swing.JLabel();
        lbDatabaseSettings = new javax.swing.JLabel();
        pnSolrSettings = new javax.swing.JPanel();
        lbSolrSettings = new javax.swing.JLabel();
        tbIndexingServerHost = new javax.swing.JTextField();
        tbIndexingServerPort = new javax.swing.JTextField();
        lbSolrMsg = new javax.swing.JLabel();
        pnMessagingSettings = new javax.swing.JPanel();
        lbMessagingSettings = new javax.swing.JLabel();
        cbEnableMultiUser = new javax.swing.JCheckBox();

        pnDatabaseSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tbHostnameOrIp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbHostnameOrIp.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbHostnameOrIp.text")); // NOI18N
        tbHostnameOrIp.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbHostnameOrIp.toolTipText")); // NOI18N
        tbHostnameOrIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbHostnameOrIpActionPerformed(evt);
            }
        });

        tbPortNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbPortNumber.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbPortNumber.text")); // NOI18N
        tbPortNumber.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbPortNumber.toolTipText")); // NOI18N

        tbUsername.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbUsername.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbUsername.text")); // NOI18N
        tbUsername.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbUsername.toolTipText")); // NOI18N

        tbPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbPassword.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbPassword.text")); // NOI18N
        tbPassword.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbPassword.toolTipText")); // NOI18N

        lbOops.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbOops.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(lbOops, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbOops.text")); // NOI18N
        lbOops.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lbDatabaseSettings.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbDatabaseSettings, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbDatabaseSettings.text")); // NOI18N
        lbDatabaseSettings.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pnDatabaseSettingsLayout = new javax.swing.GroupLayout(pnDatabaseSettings);
        pnDatabaseSettings.setLayout(pnDatabaseSettingsLayout);
        pnDatabaseSettingsLayout.setHorizontalGroup(
            pnDatabaseSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatabaseSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDatabaseSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbHostnameOrIp)
                    .addComponent(tbPortNumber)
                    .addComponent(tbUsername)
                    .addComponent(tbPassword)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatabaseSettingsLayout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(lbDatabaseSettings)
                        .addGap(18, 18, 18)
                        .addComponent(lbOops, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnDatabaseSettingsLayout.setVerticalGroup(
            pnDatabaseSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatabaseSettingsLayout.createSequentialGroup()
                .addGroup(pnDatabaseSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDatabaseSettingsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbDatabaseSettings))
                    .addComponent(lbOops, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbHostnameOrIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbPortNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnSolrSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbSolrSettings.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbSolrSettings, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbSolrSettings.text")); // NOI18N

        tbIndexingServerHost.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbIndexingServerHost.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbIndexingServerHost.text")); // NOI18N
        tbIndexingServerHost.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbIndexingServerHost.toolTipText")); // NOI18N
        tbIndexingServerHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbIndexingServerHostActionPerformed(evt);
            }
        });

        tbIndexingServerPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbIndexingServerPort.setText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbIndexingServerPort.text")); // NOI18N
        tbIndexingServerPort.setToolTipText(org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.tbIndexingServerPort.toolTipText")); // NOI18N
        tbIndexingServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbIndexingServerPortActionPerformed(evt);
            }
        });

        lbSolrMsg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbSolrMsg.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(lbSolrMsg, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbSolrMsg.text")); // NOI18N
        lbSolrMsg.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnSolrSettingsLayout = new javax.swing.GroupLayout(pnSolrSettings);
        pnSolrSettings.setLayout(pnSolrSettingsLayout);
        pnSolrSettingsLayout.setHorizontalGroup(
            pnSolrSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSolrSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSolrSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnSolrSettingsLayout.createSequentialGroup()
                        .addComponent(lbSolrSettings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbSolrMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tbIndexingServerHost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tbIndexingServerPort, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnSolrSettingsLayout.setVerticalGroup(
            pnSolrSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSolrSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSolrSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSolrSettings)
                    .addComponent(lbSolrMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbIndexingServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tbIndexingServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pnMessagingSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbMessagingSettings.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbMessagingSettings, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbMessagingSettings.text")); // NOI18N

        javax.swing.GroupLayout pnMessagingSettingsLayout = new javax.swing.GroupLayout(pnMessagingSettings);
        pnMessagingSettings.setLayout(pnMessagingSettingsLayout);
        pnMessagingSettingsLayout.setHorizontalGroup(
            pnMessagingSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMessagingSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessagingSettings)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnMessagingSettingsLayout.setVerticalGroup(
            pnMessagingSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMessagingSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessagingSettings)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(cbEnableMultiUser, org.openide.util.NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.cbEnableMultiUser.text")); // NOI18N
        cbEnableMultiUser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEnableMultiUserItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnOverallPanelLayout = new javax.swing.GroupLayout(pnOverallPanel);
        pnOverallPanel.setLayout(pnOverallPanelLayout);
        pnOverallPanelLayout.setHorizontalGroup(
            pnOverallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOverallPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnOverallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbEnableMultiUser)
                    .addComponent(pnSolrSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnDatabaseSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnMessagingSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnOverallPanelLayout.setVerticalGroup(
            pnOverallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOverallPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbEnableMultiUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnDatabaseSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnSolrSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnMessagingSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnOverallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnOverallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Enables/disables the network database settings, based upon input provided
     *
     * @param enabled true means enable, false means disable
     */
    private void enableNetworkProperties(boolean enabled) {
        tbHostnameOrIp.setEnabled(enabled);
        tbPortNumber.setEnabled(enabled);
        tbUsername.setEnabled(enabled);
        tbPassword.setEnabled(enabled);
        tbIndexingServerHost.setEnabled(enabled);
        tbIndexingServerPort.setEnabled(enabled);
    }

    private void cbEnableMultiUserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEnableMultiUserItemStateChanged
        enableNetworkProperties(cbEnableMultiUser.isSelected());
        controller.changed();
    }//GEN-LAST:event_cbEnableMultiUserItemStateChanged

    private void tbHostnameOrIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbHostnameOrIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbHostnameOrIpActionPerformed

    private void tbIndexingServerHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbIndexingServerHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbIndexingServerHostActionPerformed

    private void tbIndexingServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbIndexingServerPortActionPerformed
        // TODO add your handling code here:
        tbIndexingServerPort.dispatchEvent(evt);
    }//GEN-LAST:event_tbIndexingServerPortActionPerformed

    void load() {
        CaseDbConnectionInfo info = UserPreferences.getDatabaseConnectionInfo();
        tbHostnameOrIp.setText(info.getHost());
        tbPortNumber.setText(info.getPort());
        tbUsername.setText(info.getUserName());
        tbPassword.setText(info.getPassword());
        if (info.getDbType() == DbType.UNKNOWN) {
            cbEnableMultiUser.setSelected(false);
        } else {
            cbEnableMultiUser.setSelected(true);
        }

        tbIndexingServerHost.setText(UserPreferences.getIndexingServerHost());
        int indexingServerPort = UserPreferences.getIndexingServerPort();
        if (isPortValid(indexingServerPort)) {
            tbIndexingServerPort.setText(Integer.toString(indexingServerPort));
        }
    }

    void store() {

        DbType dbType = DbType.UNKNOWN;

        if (cbEnableMultiUser.isSelected()) {
            dbType = DbType.POSTGRESQL;
        }

        CaseDbConnectionInfo info = new CaseDbConnectionInfo(
                tbHostnameOrIp.getText(),
                tbPortNumber.getText(),
                tbUsername.getText(),
                new String(tbPassword.getPassword()),
                dbType);

        UserPreferences.setDatabaseConnectionInfo(info);
        UserPreferences.setIndexingServerHost(tbIndexingServerHost.getText());
        UserPreferences.setIndexingServerPort(Integer.parseInt(tbIndexingServerPort.getText()));
    }

    /**
     * Validates that the form is filled out correctly for our usage.
     *
     * @return true if it's okay, false otherwise.
     */
    boolean valid() {
        return validateDatabaseSettings() && validateSolrSettings();        
    }
    
    private boolean validateDatabaseSettings() {
        boolean result = false;
        String text = "";
        if (cbEnableMultiUser.isSelected()) {
            try {
                if (tbHostnameOrIp.getText().isEmpty()
                        || tbPortNumber.getText().isEmpty()
                        || tbUsername.getText().isEmpty()
                        || tbPassword.getPassword().length == 0) {
                    // We don't even have everything filled out
                    text = NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.missingDatabaseSettingsError");
                } else {
                    int value = Integer.parseInt(tbPortNumber.getText());
                    if (!isPortValid(value)) {
                        text = NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.missingSolrSettingsError");
                    } else {
                        result = true;
                    }
                }                
            } catch (Exception ex) {
                text = NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.invalidDatabaseSettings");
            }
        }
        else{
            result = true;
        }
        
        lbOops.setText(text);
        return result;
    }
    
    private boolean validateSolrSettings() {
        if (cbEnableMultiUser.isSelected()) {
            // If both Solr server settings are empty that's ok but if
            // either one is set you must set the other one.
            if (tbIndexingServerHost.getText().isEmpty() &&
                    tbIndexingServerPort.getText().isEmpty()) {
                return true;
            }
            
            if (tbIndexingServerHost.getText().isEmpty() ||
                    tbIndexingServerPort.getText().isEmpty()) {
                lbSolrMsg.setText(NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.missingSolrSettingsError"));
                return false;
            }
            
            try {
                int port = Integer.parseInt(tbIndexingServerPort.getText());
                if (!isPortValid(port)) {
                    lbSolrMsg.setText(NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.invalidPortNumber")); 
                }
            }
            catch (NumberFormatException ex) {
                lbSolrMsg.setText(NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.invalidPortNumber"));
                return false;
            }            
        }    

        lbSolrMsg.setText(NbBundle.getMessage(MultiUserSettingsPanel.class, "MultiUserSettingsPanel.lbSolrMsg.text"));
        return true;
    }
    
    /**
     * Checks the given port number against the range of valid values.
     * @param port
     * @return 
     */
    private boolean isPortValid(int port) {
        if (port < 1 || port > 65535) {
            return false;
        }
        
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbEnableMultiUser;
    private javax.swing.JLabel lbDatabaseSettings;
    private javax.swing.JLabel lbMessagingSettings;
    private javax.swing.JLabel lbOops;
    private javax.swing.JLabel lbSolrMsg;
    private javax.swing.JLabel lbSolrSettings;
    private javax.swing.JPanel pnDatabaseSettings;
    private javax.swing.JPanel pnMessagingSettings;
    private javax.swing.JPanel pnOverallPanel;
    private javax.swing.JPanel pnSolrSettings;
    private javax.swing.JTextField tbHostnameOrIp;
    private javax.swing.JTextField tbIndexingServerHost;
    private javax.swing.JTextField tbIndexingServerPort;
    private javax.swing.JPasswordField tbPassword;
    private javax.swing.JTextField tbPortNumber;
    private javax.swing.JTextField tbUsername;
    // End of variables declaration//GEN-END:variables

    /**
     * Used to listen for changes in text boxes. It lets the panel know things
     * have been updated and that validation needs to happen.
     */
    class TextBoxChangedListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override

        public void removeUpdate(DocumentEvent e) {
            controller.changed();
        }        
    }
}
