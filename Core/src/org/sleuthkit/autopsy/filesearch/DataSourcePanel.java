/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.filesearch;

import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;

public class DataSourcePanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(DataSourcePanel.class.getName());
    private static final long serialVersionUID = 1L;
    private final Map<Long, String> dataSourceMap = new HashMap<>();
    private List<String> toolTipList = new ArrayList<>();

    /**
     * Creates new form DataSourcePanel
     */
    public DataSourcePanel() {
        initComponents();
        setComponentsEnabled();
        this.dataSourceList.addListSelectionListener((ListSelectionEvent e) -> {
            firePropertyChange(FileSearchPanel.EVENT.CHECKED.toString(), null, null);
        });
        this.dataSourceList.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent e) {
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                JList<String> DsList = (JList<String>) e.getSource();
                int index = DsList.locationToIndex(e.getPoint());
                if (index > -1) {
                    DsList.setToolTipText(toolTipList.get(index));
                }
            }
    });
    }

    private List<String> getDataSourceArray() {
        try {
            Case currentCase = Case.getOpenCase();
            SleuthkitCase tskDb = currentCase.getSleuthkitCase();
            getLoadLogicalSources(tskDb);
            getLoadImageSources(tskDb);
        } catch (NoCurrentCaseException ex) {
            logger.log(Level.SEVERE, "Unable to get current open case.", ex);
        } catch (TskCoreException | SQLException ex) {
            logger.log(Level.SEVERE, "Failed to get data source info from database.", ex);
        }

        List<String> dataSourcesList = new ArrayList<>(dataSourceMap.values());
        Collections.sort(dataSourcesList, (String dsName1, String dsName2) -> dsName1.compareTo(dsName2));
        List<String> dataSourceDisplayNames = new ArrayList<>();
        for (String dataSource : dataSourcesList) {
            File dataSourceFullName = new File(dataSource);
            dataSourceDisplayNames.add(dataSourceFullName.getName());
            toolTipList.add(dataSourceFullName.getParent());
        }
        return dataSourceDisplayNames;
    }

    Set<Long> getDataSourcesSelected() {
        Set<Long> dataSourceObjIdSet = new HashSet<>();
        for (Long key : dataSourceMap.keySet()) {
            String value = dataSourceMap.get(key);
            for (String dataSource : this.dataSourceList.getSelectedValuesList()) {
                if (value.equals(dataSource)) {
                    dataSourceObjIdSet.add(key);
                }
            }
        }
        return dataSourceObjIdSet;
    }

    boolean isSelected() {
        return this.dataSourceCheckBox.isSelected();
    }

    void setComponentsEnabled() {
        boolean enabled = this.isSelected();
        this.dataSourceList.setEnabled(enabled);
        this.jLabel.setEnabled(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataSourceList = new javax.swing.JList<>();
        dataSourceCheckBox = new javax.swing.JCheckBox();
        jLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(150, 150));
        setPreferredSize(new java.awt.Dimension(100, 100));

        dataSourceList.setModel(new javax.swing.AbstractListModel<String>() {
            List<String> strings  = getDataSourceArray();
            public int getSize() { return strings.size(); }
            public String getElementAt(int i) { return strings.get(i); }
        });
        dataSourceList.setMinimumSize(new java.awt.Dimension(0, 200));
        jScrollPane1.setViewportView(dataSourceList);

        org.openide.awt.Mnemonics.setLocalizedText(dataSourceCheckBox, org.openide.util.NbBundle.getMessage(DataSourcePanel.class, "DataSourcePanel.dataSourceCheckBox.text")); // NOI18N
        dataSourceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceCheckBoxActionPerformed(evt);
            }
        });

        jLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel, org.openide.util.NbBundle.getMessage(DataSourcePanel.class, "DataSourcePanel.jLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dataSourceCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(dataSourceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel)
                .addContainerGap())
        );

        dataSourceCheckBox.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void dataSourceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceCheckBoxActionPerformed
        setComponentsEnabled();
        firePropertyChange(FileSearchPanel.EVENT.CHECKED.toString(), null, null);
        this.dataSourceList.setSelectedIndices(new int[0]);
    }//GEN-LAST:event_dataSourceCheckBoxActionPerformed

    private void getLoadLogicalSources(SleuthkitCase tskDb) throws TskCoreException, SQLException {
        final String SELECT_DATA_SOURCES_LOGICAL = "select obj_id, name from tsk_files where obj_id in (SELECT obj_id FROM tsk_objects WHERE obj_id in (select obj_id from data_source_info)) order by name";

        try (
                SleuthkitCase.CaseDbQuery query = tskDb.executeQuery(SELECT_DATA_SOURCES_LOGICAL);
                ResultSet resultSet = query.getResultSet()) {
            while (resultSet.next()) {
                Long objectId = resultSet.getLong("obj_id");
                String dataSourceName = resultSet.getString("name");
                dataSourceMap.put(objectId, dataSourceName);
                toolTipList.add(dataSourceName);
            }
        }
    }

    private void getLoadImageSources(SleuthkitCase tskDb) throws SQLException, TskCoreException {
        final String SELECT_DATA_SOURCES_IMAGE = "select obj_id, name from tsk_image_names where obj_id in (SELECT obj_id FROM tsk_objects WHERE obj_id in (select obj_id from data_source_info)) order by name";
        try (
                SleuthkitCase.CaseDbQuery query = tskDb.executeQuery(SELECT_DATA_SOURCES_IMAGE);
                ResultSet resultSet = query.getResultSet()) {

            while (resultSet.next()) {
                Long objectId = resultSet.getLong("obj_id");
                String dataSourceName = resultSet.getString("name");
                File image = new File(dataSourceName);
                dataSourceMap.put(objectId, image.getName());
                toolTipList.add(dataSourceName);
             }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dataSourceCheckBox;
    private javax.swing.JList<String> dataSourceList;
    private javax.swing.JLabel jLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
