/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011-2016 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.ingest;

import java.beans.PropertyChangeListener;
import org.sleuthkit.autopsy.corecomponents.OptionsPanel;
import org.sleuthkit.autopsy.modules.interestingitems.FilesSetDefsPanel;
import org.sleuthkit.autopsy.modules.interestingitems.FilesSetDefsPanel.PANEL_TYPE;

/**
 * Global options panel for keyword searching.
 */
class IngestOptionsPanel extends IngestModuleGlobalSettingsPanel implements OptionsPanel {

    private FilesSetDefsPanel filterPanel;
    private IngestSettingsPanel settingsPanel;


    IngestOptionsPanel() {
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        setName("Temporary Name");
        filterPanel = new FilesSetDefsPanel(PANEL_TYPE.FILE_INGEST_FILTERS);
        settingsPanel = new IngestSettingsPanel();
        tabbedPane.insertTab("Settings", null,
                settingsPanel, "Tootip 1", 0);
        tabbedPane.insertTab("Filters", null,
                filterPanel, "Tooltip 2", 1);

    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener l) {
        filterPanel.addPropertyChangeListener(l);
        settingsPanel.addPropertyChangeListener(l);
    }

    @Override
    public void removePropertyChangeListener(PropertyChangeListener l) {
        filterPanel.removePropertyChangeListener(l);
        settingsPanel.removePropertyChangeListener(l);
    }

    @Override
    public void saveSettings() {
        filterPanel.store();
        settingsPanel.store();
    }

    @Override
    public void store() {
        saveSettings();
    }

    @Override
    public void load() {
        filterPanel.load();
        settingsPanel.load(); 
   }

    boolean valid() {
        return true;
    }

    public void cancel() {
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
