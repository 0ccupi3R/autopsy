/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011-2017 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.ingest.runIngestModuleWizard;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import org.sleuthkit.autopsy.corecomponents.AdvancedConfigurationDialog;
import org.sleuthkit.autopsy.ingest.IngestOptionsPanel;
import org.sleuthkit.autopsy.ingest.IngestProfileMap;
import org.sleuthkit.autopsy.ingest.IngestProfileMap.IngestProfile;

final class IngestProfileSelectionPanel extends JPanel implements ItemListener {

    private static final String CUSTOM_SETTINGS_DISPLAY_NAME = "Custom Settings";
    private static final String CUSTOM_SETTINGS_DESCRIPTION = "configure individual module settings in next step of wizard";  //WJS-TODO these should be @Message
    private final RunIngestModuleWizardWizardPanel1 wizardPanel;
    private String selectedProfile;
    private List<IngestProfile> elements = Collections.emptyList();

    /**
     * Creates new form runIngestModuleWizardVisualPanel1
     */
    IngestProfileSelectionPanel(RunIngestModuleWizardWizardPanel1 panel, String lastSelectedProfile) {
        initComponents();
        //WJS-TODO figure out how to get width of writable area, if text length greater than width. Trim text to width minus 3 chars in length and then add ... to the end
        wizardPanel = panel;
        selectedProfile = lastSelectedProfile;
        populateListOfCheckboxes();

    }

    String getLastSelectedProfile() {
        return selectedProfile;
    }

    private void populateListOfCheckboxes() {
        elements = getElements();
        addRadioButton(CUSTOM_SETTINGS_DISPLAY_NAME, RunIngestModuleWizardWizardIterator.getDefaultContext(), CUSTOM_SETTINGS_DESCRIPTION);
        for (IngestProfile profile : elements) {
            addRadioButton(profile.toString(), profile.toString(), profile.getDescription());
        }
    }

    private void addRadioButton(String profileDisplayName, String profileContextName, String profileDesc) {
        String displayText = profileDisplayName + " - " + profileDesc;
        int width = jScrollPane1.getWidth();
        if (width > 3) {
            if (displayText.length() > width) {
                String ellipses = "...";
                displayText = displayText.substring(0, width - ellipses.length()) + ellipses;
            }
        } else {
            System.out.println("NOT KNOWN BEFORE DRAWN USE DIFFERENT WAY TO GET WIDTH");  //WJS-TODO remove this when working
        }
        JRadioButton myRadio = new JRadioButton(displayText); //NON-NLS
        myRadio.setName(profileContextName);
        myRadio.setToolTipText(profileDesc);
        myRadio.addItemListener(this);
        if (profileContextName.equals(selectedProfile)) {
            myRadio.setSelected(true);
        }

        buttonGroup1.add(myRadio);
        jPanel1.add(myRadio);

    }

    @Override
    public String getName() {
        return "Ingest Profile Selection";  //WJS-TODO @Messages this
    }

    private List<IngestProfile> getElements() {
        if (elements.isEmpty()) {
            fetchListContents();
        }
        return elements;
    }

    private void clearListOfCheckBoxes() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(5750, 3000));
        setPreferredSize(new java.awt.Dimension(625, 450));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(IngestProfileSelectionPanel.class, "IngestProfileSelectionPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(jPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(IngestProfileSelectionPanel.class, "IngestProfileSelectionPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 523, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final AdvancedConfigurationDialog dialog = new AdvancedConfigurationDialog(true);
        IngestOptionsPanel ingestOptions = new IngestOptionsPanel();
        ingestOptions.load();
        dialog.addApplyButtonListener(
                (ActionEvent e) -> {
                    ingestOptions.store();
                    clearListOfCheckBoxes();
                    fetchListContents();
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    populateListOfCheckboxes();
                    dialog.close();
                }
        );
        dialog.display(ingestOptions);
    }//GEN-LAST:event_jButton1ActionPerformed

    boolean hasNextPanel = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        for (Component rButton : jPanel1.getComponents()) {
            JRadioButton jrb = (JRadioButton) rButton;
            if (jrb.isSelected()) {
                selectedProfile = jrb.getName();
                break;
            }
        }
        boolean hadNextPanel = hasNextPanel;
        if (selectedProfile.equals(RunIngestModuleWizardWizardIterator.getDefaultContext())) {
            hasNextPanel = true;
        } else {
            hasNextPanel = false;
        }
        wizardPanel.fireChangeEvent();
        this.firePropertyChange("LAST_ENABLED", hadNextPanel, hasNextPanel); //NON-NLS
    }

    private void fetchListContents() {
        elements = new ArrayList<>();
        elements.addAll(new IngestProfileMap().getIngestProfileMap().values());
    }
}
