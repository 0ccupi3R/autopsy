/*
 *
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.modules.case_uco;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ComboBoxModel;

/**
 * UI controls for Common Files Search scenario where the user intends to find
 * common files between datasources. It is an inner panel which provides the
 * ability to select all datasources or a single datasource from a dropdown list
 * of sources in the current case.
 */
public final class ReportCaseUcoConfigPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    static final long NO_DATA_SOURCE_SELECTED = -1;
    private final Observable fileTypeFilterObservable;
    private ComboBoxModel<String> dataSourcesList = new DataSourceComboBoxModel();
    private final Map<Long, String> dataSourceMap;

    /**
     * Creates new form IntraCasePanel
     */
    public ReportCaseUcoConfigPanel() {
        initComponents();
        this.dataSourceMap = new HashMap<>();
        fileTypeFilterObservable = new Observable() {
            @Override
            public void notifyObservers() {
                //set changed before notify observers
                //we want this observerable to always cause the observer to update when notified
                this.setChanged();
                super.notifyObservers();
            }
        };
    }

    /**
     * Add an Observer to the Observable portion of this panel so that it can be
     * notified of changes to this panel.
     *
     * @param observer the object which is observing this panel
     */
    void addObserver(Observer observer) {
        fileTypeFilterObservable.addObserver(observer);
    }

    /**
     * Get the map of datasources which was used to populate the combo box on
     * this panel.
     *
     * @return an unmodifiable copy of the map of datasources
     */
    Map<Long, String> getDataSourceMap() {
        return Collections.unmodifiableMap(this.dataSourceMap);
    }

    /**
     * Get the ID for the datasource selected in the combo box.
     *
     * @return the selected datasource ID or
         ReportCaseUcoConfigPanel.NO_DATA_SOURCE_SELECTED if none is selected
     */
    Long getSelectedDataSourceId() {
        for (Entry<Long, String> entry : this.dataSourceMap.entrySet()) {
            if (entry.getValue().equals(this.selectDataSourceComboBox.getSelectedItem())) {
                return entry.getKey();
            }
        }
        return ReportCaseUcoConfigPanel.NO_DATA_SOURCE_SELECTED;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectDataSourceComboBox = new javax.swing.JComboBox<>();
        jLabelSelectDataSource = new javax.swing.JLabel();

        selectDataSourceComboBox.setModel(dataSourcesList);
        selectDataSourceComboBox.setEnabled(false);

        jLabelSelectDataSource.setText(org.openide.util.NbBundle.getMessage(ReportCaseUcoConfigPanel.class, "ReportCaseUcoConfigPanel.jLabelSelectDataSource.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSelectDataSource)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(selectDataSourceComboBox, 0, 348, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabelSelectDataSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectDataSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelSelectDataSource;
    private javax.swing.JComboBox<String> selectDataSourceComboBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Set the datamodel for the combo box which displays the data sources in
     * the current case
     *
     * @param dataSourceComboBoxModel the DataSourceComboBoxModel to use
     */
    void setDatasourceComboboxModel(DataSourceComboBoxModel dataSourceComboBoxModel) {
        this.dataSourcesList = dataSourceComboBoxModel;
        this.selectDataSourceComboBox.setModel(dataSourcesList);
    }

    /**
     * Update the map of datasources that this panel allows the user to select
     * from
     *
     * @param dataSourceMap A map of datasources
     */
    void setDataSourceMap(Map<Long, String> dataSourceMap) {
        this.dataSourceMap.clear();
        this.dataSourceMap.putAll(dataSourceMap);
    }
}
