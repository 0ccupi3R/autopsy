/*
 * Autopsy
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.texttranslation.translators;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.google.gson.JsonObject;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;
import java.io.IOException;
import java.util.logging.Logger;

/**
 * Settings panel for the GoogleTranslator
 */
public class BingTranslatorSettingsPanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(BingTranslatorSettingsPanel.class.getName());
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form GoogleTranslatorSettingsPanel
     */
    public BingTranslatorSettingsPanel(String credentials) {
        initComponents();
        credentialsField.setText(credentials);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        credentialsLabel = new javax.swing.JLabel();
        credentialsField = new javax.swing.JTextField();
        warningLabel = new javax.swing.JLabel();
        testButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(credentialsLabel, org.openide.util.NbBundle.getMessage(BingTranslatorSettingsPanel.class, "GoogleTranslatorSettingsPanel.credentialsLabel.text")); // NOI18N

        warningLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(warningLabel, org.openide.util.NbBundle.getMessage(BingTranslatorSettingsPanel.class, "GoogleTranslatorSettingsPanel.warningLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testButton, org.openide.util.NbBundle.getMessage(BingTranslatorSettingsPanel.class, "BingTranslatorSettingsPanel.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(credentialsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(credentialsField, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testButton)
                        .addGap(8, 8, 8))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credentialsLabel)
                    .addComponent(credentialsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testButton))
                .addGap(31, 31, 31)
                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        if (testTranslationSetup()) {
            warningLabel.setText("");
        } else {
            warningLabel.setText("Invalid translation credentials");
        }
    }//GEN-LAST:event_testButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField credentialsField;
    private javax.swing.JLabel credentialsLabel;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Converts an input test to the JSON format required by Bing Translator,
     * posts it to Microsoft, and returns the JSON text response.
     *
     * @param string The input text to be translated.
     *
     * @return The translation response as a JSON string
     *
     * @throws IOException if the request could not be executed due to
     *                     cancellation, a connectivity problem or timeout.
     */
    private boolean testTranslationSetup() {
        String testString = "forense";
        MediaType mediaType = MediaType.parse("application/json");

        JsonArray jsonArray = new JsonArray();
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("Text", testString);
        jsonArray.add(jsonObject);
        String bodyString = jsonArray.toString();

        RequestBody body = RequestBody.create(mediaType,
                bodyString);
        Request request = new Request.Builder()
                .url(BingTranslator.getMicrosftTranlatorUrl()).post(body)
                .addHeader("Ocp-Apim-Subscription-Key", credentialsField.getText())
                .addHeader("Content-type", "application/json").build();
        try {
            Response response = new OkHttpClient().newCall(request).execute();
            JsonParser parser = new JsonParser();
            JsonArray responses = parser.parse(response.body().string()).getAsJsonArray();
            //As far as I know, there's always exactly one item in the array.
            JsonObject response0 = responses.get(0).getAsJsonObject();
            JsonArray translations = response0.getAsJsonArray("translations");
            JsonObject translation0 = translations.get(0).getAsJsonObject();
            translation0.get("text").getAsString();
            return true;
        } catch (IOException | IllegalStateException | ClassCastException | NullPointerException | IndexOutOfBoundsException e) {
            return false;
        }

    }

    /**
     * Get the currently set path to the JSON credentials file
     *
     * @return the path to the credentials file specified in the textarea
     */
    String getCredentials() {
        return credentialsField.getText();
    }
}
