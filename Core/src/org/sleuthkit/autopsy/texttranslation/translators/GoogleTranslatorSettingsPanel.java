/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.texttranslation.translators;

import com.google.cloud.translate.Language;
import com.google.cloud.translate.Translate;
import com.google.cloud.translate.TranslateOptions;
import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author wschaefer
 */
public class GoogleTranslatorSettingsPanel extends javax.swing.JPanel {

    private static final String JSON_EXTENSION = "json";
    private static final String DEFAULT_CREDENTIAL_PATH = "";
    private static final String DEFAULT_TARGET_LANGUAGE = TranslateOptions.getDefaultInstance().getTargetLanguage();
    private static final long serialVersionUID = 1L;
    private final GoogleTranslatorSettings settings;
    private Language targetLanguage;
    private String targetLanguageCode = "";
    private String credentialPath = "";

    /**
     * Creates new form GoogleTranslatorSettingsPanel
     */
    public GoogleTranslatorSettingsPanel(GoogleTranslatorSettings settings) {
        initComponents();
        loadSettings();
        settings.loadTranslator(credentialPath, targetLanguageCode);
        this.settings = settings;
    }

    String getCredentialPath() {
        return credentialPath;
    }

    String getTargetLanguage() {
        return targetLanguageCode;
    }

    void populateTargetLanguageComboBox() {
        try {
            if (settings.getTranslator() != null) {
                System.out.println("translator exists");;
                List<Language> listSupportedLanguages = settings.getTranslator().listSupportedLanguages(Translate.LanguageListOption.targetLanguage(targetLanguageCode));
                targetLanguageComboBox.removeAllItems();
                if (listSupportedLanguages != null) {
                    listSupportedLanguages.forEach((lang) -> {
                        targetLanguageComboBox.addItem(new LanguageWrapper(lang));
                    });
                }
                selectLanguageByCode(targetLanguageCode);
                System.out.println("enabling combo box");
                targetLanguageComboBox.setEnabled(true);
            } else {
                System.out.println("disabling combo box");
                targetLanguageComboBox.setEnabled(false);
            }
        } catch (Throwable throwable) {
            targetLanguageComboBox.setEnabled(false);
            System.out.println("THROWN: " + throwable.getMessage());
            System.out.println(throwable.getStackTrace());
        }
    }

    private void selectLanguageByCode(String code) {
        for (int i = 0; i < targetLanguageComboBox.getModel().getSize(); i++) {
            if (targetLanguageComboBox.getItemAt(i).getLanguage().getCode().equals(targetLanguageCode)) {
                targetLanguageComboBox.setSelectedIndex(i);
                return;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        credentialsLabel = new javax.swing.JLabel();
        credentialsPathField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        targetLanguageComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(credentialsLabel, org.openide.util.NbBundle.getMessage(GoogleTranslatorSettingsPanel.class, "GoogleTranslatorSettingsPanel.credentialsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(GoogleTranslatorSettingsPanel.class, "GoogleTranslatorSettingsPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        targetLanguageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetLanguageComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GoogleTranslatorSettingsPanel.class, "GoogleTranslatorSettingsPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(credentialsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(credentialsPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(targetLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credentialsLabel)
                    .addComponent(credentialsPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(targetLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Messages({"GoogleTranslatorSettingsPanel.json.description=JSON Files",
        "GoogleTranslatorSettingsPanel.fileChooser.confirmButton=Select"})
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDragEnabled(false);
        if (!credentialPath.isEmpty()) {
            fileChooser.setCurrentDirectory(new File(credentialPath).getParentFile());
        }
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter(Bundle.GoogleTranslatorSettingsPanel_json_description(), JSON_EXTENSION));
        if (fileChooser.showDialog(this, Bundle.GoogleTranslatorSettingsPanel_fileChooser_confirmButton()) == JFileChooser.APPROVE_OPTION) {
            credentialsPathField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void targetLanguageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetLanguageComboBoxActionPerformed
        targetLanguage = ((LanguageWrapper) targetLanguageComboBox.getSelectedItem()).getLanguage();
    }//GEN-LAST:event_targetLanguageComboBoxActionPerformed

    void saveSettings() {
        credentialPath = credentialsPathField.getText();
        if (targetLanguage != null) {
            targetLanguageCode = targetLanguage.getCode();
        }
        else {
            targetLanguageCode = DEFAULT_TARGET_LANGUAGE;
        }
        populateTargetLanguageComboBox();
        settings.loadTranslator(credentialPath, targetLanguageCode);
    }

    private void loadSettings() {
        credentialPath = DEFAULT_CREDENTIAL_PATH;
        targetLanguageCode = DEFAULT_TARGET_LANGUAGE;
        credentialsPathField.setText(credentialPath);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel credentialsLabel;
    private javax.swing.JTextField credentialsPathField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<LanguageWrapper> targetLanguageComboBox;
    // End of variables declaration//GEN-END:variables
}
