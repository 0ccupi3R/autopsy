/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.texttranslation.ui;

import java.awt.Color;
import java.awt.Cursor;
import java.util.MissingResourceException;
import javax.swing.ImageIcon;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ImageUtilities;
import org.sleuthkit.autopsy.corecomponents.TextPrompt;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.texttranslation.NoServiceProviderException;
import org.sleuthkit.autopsy.texttranslation.TextTranslationService;
import org.sleuthkit.autopsy.texttranslation.TranslationException;

public final class TranslationSettingsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private static final String HOST_NAME_OR_IP_PROMPT = NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.IpAddress.toolTipText");
    private final TranslationSettingsPanel.TextBoxChangedListener textBoxChangedListener;
    private final ImageIcon goodIcon;
    private final ImageIcon badIcon;
    private final TranslationSettingsPanelController controller;

    public TranslationSettingsPanel(TranslationSettingsPanelController theController) {
        controller = theController;
        initComponents();
        setSize(555, 600);

        // Add text prompt to the text field
        TextPrompt textPrompt = new TextPrompt(HOST_NAME_OR_IP_PROMPT, tbIpAddress);
        textPrompt.setForeground(Color.LIGHT_GRAY);
        textPrompt.changeAlpha(0.9f);

        // Set a "statusIcon" property enabling the DocumentListeners to know which icon to erase when changes are made
        tbIpAddress.getDocument().putProperty("statusIcon", lbTestIpAddress);

        /// Register for notifications when the text box gets updated.
        textBoxChangedListener = new TranslationSettingsPanel.TextBoxChangedListener();
        tbIpAddress.getDocument().addDocumentListener(textBoxChangedListener);
        tbIpAddress.setToolTipText(HOST_NAME_OR_IP_PROMPT);
        lbIpAddress.setToolTipText(HOST_NAME_OR_IP_PROMPT);

        goodIcon = new ImageIcon(ImageUtilities.loadImage("org/sleuthkit/autopsy/images/good.png", false));
        badIcon = new ImageIcon(ImageUtilities.loadImage("org/sleuthkit/autopsy/images/bad.png", false));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lbIpAddress = new javax.swing.JLabel();
        bnTest = new javax.swing.JButton();
        tbIpAddress = new javax.swing.JTextField();
        tbOops = new javax.swing.JTextField();
        lbTestIpAddress = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setBorder(null);

        jPanel1.setPreferredSize(new java.awt.Dimension(410, 100));

        lbIpAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbIpAddress, org.openide.util.NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.lbIpAddress.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bnTest, org.openide.util.NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.bnTest.text")); // NOI18N
        bnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnTestActionPerformed(evt);
            }
        });

        tbIpAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbIpAddress.setText(org.openide.util.NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.tbIpAddress.text")); // NOI18N

        tbOops.setEditable(false);
        tbOops.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tbOops.setForeground(new java.awt.Color(255, 0, 0));
        tbOops.setText(org.openide.util.NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.tbOops.text")); // NOI18N
        tbOops.setBorder(null);

        org.openide.awt.Mnemonics.setLocalizedText(lbTestIpAddress, org.openide.util.NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.lbTestIpAddress.text")); // NOI18N
        lbTestIpAddress.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbIpAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bnTest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTestIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tbIpAddress)
                    .addComponent(tbOops))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbIpAddress)
                        .addComponent(bnTest))
                    .addComponent(lbTestIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbOops, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Allows population of the IP address field from Shared Configuration
     * downloads.
     *
     * @param ipAddress The IP address to populate
     */
    void populateIpAddress(String ipAddress) {
        tbIpAddress.setText(ipAddress);
    }

    private void bnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnTestActionPerformed
        try {
            lbTestIpAddress.setIcon(null);
            tbOops.setText("");
            store();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            /// test if we can connect to the machine translation service
            try {
                TextTranslationService translator = TextTranslationService.getInstance();
                translator.translate("test input");
                lbTestIpAddress.setIcon(goodIcon);
                tbOops.setText("");
            } catch (NoServiceProviderException | TranslationException ex) {
                lbTestIpAddress.setIcon(badIcon);
                tbOops.setText(NbBundle.getMessage(
                        TranslationSettingsPanel.class, 
                        "TranslationSettingsPanel.IpAddress.CannotConnect"));
            }

        } catch (MissingResourceException ex) {
            lbTestIpAddress.setIcon(badIcon);
            tbOops.setText(NbBundle.getMessage(TranslationSettingsPanel.class, "TranslationSettingsPanel.IpAddress.CannotConnect") + " " + ex.getMessage());
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_bnTestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnTest;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbIpAddress;
    private javax.swing.JLabel lbTestIpAddress;
    private javax.swing.JTextField tbIpAddress;
    private javax.swing.JTextField tbOops;
    // End of variables declaration//GEN-END:variables

    void load() {
        lbTestIpAddress.setIcon(null);
        tbOops.setText("");
//        tbIpAddress.setText(getMachineTranslationIpAddress());
        handleButtons();
        controller.changed();
    }

    void store() {
//        setMachineTranslationIpAddress(tbIpAddress.getText());
    }
    
    boolean valid() {
        // machine translation configuration can be either IP address or hostname so
        // user should be able to save any string. This includes empty string if 
        // user wants to stop using machine translation.
        return true;
    }

    /**
     * Used to listen for changes in text boxes. It lets the panel know things
     * have been updated so we can clear the status icon.
     */
    class TextBoxChangedListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon");
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            tbOops.setText(null);
            handleButtons();
            controller.changed();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon");
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            tbOops.setText(null);
            handleButtons();
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon");
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            tbOops.setText(null);
            handleButtons();
            controller.changed();
        }
    }

    void handleButtons() {
        // If IP address is unset, disable the test button, otherwise enable it.
        boolean result = ((tbIpAddress == null || tbIpAddress.getText().isEmpty()));
        if (result == true) {
            lbTestIpAddress.setText(null);
            tbOops.setText(null);
        }
        bnTest.setEnabled(!result);
    }

    @Override
    public void setEnabled(boolean enabled) {
        bnTest.setEnabled(enabled);
        lbIpAddress.setEnabled(enabled);
        lbTestIpAddress.setEnabled(enabled);
        tbIpAddress.setEnabled(enabled);
        tbOops.setEnabled(enabled);
    }

}
