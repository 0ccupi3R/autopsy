/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.corecomponents;

import java.awt.Component;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.util.Arrays;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import org.gstreamer.*;
import org.gstreamer.elements.DecodeBin2;
import org.gstreamer.io.InputStreamSrc;
import org.gstreamer.swing.VideoComponent;
import org.openide.nodes.Node;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer;
import org.sleuthkit.datamodel.File;
import org.sleuthkit.datamodel.ReadContentInputStream;
import org.sleuthkit.datamodel.TskData;

/**
 *
 * @author dfickling
 */
@ServiceProvider(service = DataContentViewer.class)
public class DataContentViewerMedia extends javax.swing.JPanel implements DataContentViewer {

    private static final String[] IMAGES = new String[]{ ".jpg", ".jpeg", ".png", ".gif", ".jpe", ".bmp"};
    private static final String[] VIDEOS = new String[]{ ".mov", ".m4v", ".flv", ".mp4", ".3gp"};
    private static final Logger logger = Logger.getLogger(DataContentViewerMedia.class.getName());
    private VideoComponent videoComponent; 
    private Pipeline pipe;
    private Element source = null;
    private DecodeBin2 decodeBin;
    private Bin audioBin;
    /**
     * Creates new form DataContentViewerVideo
     */
    public DataContentViewerMedia() {
        initComponents();
        customizeComponents();
    }
    
    private void customizeComponents() {
        Gst.init();
        resetVideo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pauseButton = new javax.swing.JButton();
        videoPanel = new javax.swing.JPanel();

        pauseButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerMedia.class, "DataContentViewerMedia.pauseButton.text")); // NOI18N
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout videoPanelLayout = new javax.swing.GroupLayout(videoPanel);
        videoPanel.setLayout(videoPanelLayout);
        videoPanelLayout.setHorizontalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );
        videoPanelLayout.setVerticalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(videoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pauseButton)
                .addGap(240, 240, 240))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(videoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if(pipe.isPlaying()){
            pipe.pause();
            pauseButton.setText("►");
        } else {
            pipe.play();
            pauseButton.setText("||");
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton pauseButton;
    private javax.swing.JPanel videoPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setNode(Node selectedNode) {
        pauseButton.setText("►");
        if(selectedNode == null) {
            setDataView(null);
            return;
        }
        File file = selectedNode.getLookup().lookup(File.class);
        resetVideo();
        setDataView(file);
        boolean isVid = isVid(file.getName());
        pauseButton.setVisible(isVid);
    }

    private void setDataView(File file) {
        if(file == null)
            return;
        InputStream is = new ReadContentInputStream(file);
        source = new InputStreamSrc(new BufferedInputStream(is), "input file");
        pipe.add(source);
        
        source.link(decodeBin);

        decodeBin.connect(new DecodeBin2.NEW_DECODED_PAD() {
            @Override
            public void newDecodedPad(DecodeBin2 elem, Pad pad, boolean last) {

                /*
                 * only link once
                 */
                if (pad.isLinked()) {
                    return;
                }
                
                Caps caps = pad.getCaps();
                Structure struct = caps.getStructure(0);
                if (struct.getName().startsWith("audio/")) {
                    pad.link(audioBin.getStaticPad("sink"));
                } else if (struct.getName().startsWith("video/")) {
                    pad.link(videoComponent.getElement().getStaticPad("sink"));
                }
            }
        });
        if(!isVid(file.getName()))
                pipe.play();
    }

    @Override
    public String getTitle() {
        return "Media View";
    }

    @Override
    public String getToolTip() {
        return "Displays supported multimedia files";
    }

    @Override
    public DataContentViewer getInstance() {
        return new DataContentViewerMedia();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void resetComponent() {
    }
    
    private void resetVideo() {
        if(pipe != null) {
            pipe.stop();
            pipe.dispose();
        }
        pipe = new Pipeline("main pipeline");
        videoComponent = new VideoComponent();
        videoPanel.removeAll();
        videoPanel.setLayout(new BoxLayout(videoPanel, BoxLayout.Y_AXIS));
        videoPanel.add(videoComponent);
        videoPanel.revalidate();
        videoPanel.repaint();
        decodeBin = (DecodeBin2) ElementFactory.make("decodebin2", "Decode Bin");
        pipe.add(decodeBin);
        audioBin = new Bin("Audio Bin");
        Element conv = ElementFactory.make("audioconvert", "Audio Convert");
        Element resample = ElementFactory.make("audioresample", "Audio Resample");
        Element sink = ElementFactory.make("autoaudiosink", "sink");
        audioBin.addMany(conv, resample, sink);
        Element.linkMany(conv, resample, sink);
        audioBin.addPad(new GhostPad("sink", conv.getStaticPad("sink")));
        pipe.add(audioBin);
        pipe.add(videoComponent.getElement());
    }

    @Override
    public boolean isSupported(Node node) {
        if (node == null) {
            resetVideo();
            return false;
        }

        File file = node.getLookup().lookup(File.class);
        if (file == null) {
            resetVideo();
            return false;
        }

        if (File.dirFlagToValue(file.getDir_flags()).equals(TskData.TSK_FS_NAME_FLAG_ENUM.TSK_FS_NAME_FLAG_UNALLOC.toString())) {
            resetVideo();
            return false;
        }

        String name = file.getName().toLowerCase();
        int extStart = name.lastIndexOf(".");
        String ext = "";
        if (extStart != -1) {
            ext = name.substring(extStart, name.length());
        }
        if(file.getSize() == 0) {
            resetVideo();
            return false;
        }
        
        if(!Arrays.asList(IMAGES).contains(ext) && !Arrays.asList(VIDEOS).contains(ext)) {
            resetVideo();
            return false;
        }
        
        resetVideo();
        return true;
    }

    @Override
    public boolean isPreferred(Node node, boolean isSupported) {
        return isSupported;
    }
    
    private static boolean isVid(String name) {
        int extStart = name.lastIndexOf(".");
        String ext = "";
        if (extStart != -1) {
            ext = name.substring(extStart, name.length());
        }
        return Arrays.asList(VIDEOS).contains(ext);
    }
}
