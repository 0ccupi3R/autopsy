/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.experimental.enterpriseartifactsmanager.optionspanel;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;
import org.sleuthkit.autopsy.corecomponents.TextPrompt;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.experimental.enterpriseartifactsmanager.datamodel.EamDbException;
import org.sleuthkit.autopsy.experimental.enterpriseartifactsmanager.datamodel.EamDbPlatformEnum;
import org.sleuthkit.autopsy.experimental.enterpriseartifactsmanager.datamodel.PostgresEamDbSettings;
import org.sleuthkit.autopsy.experimental.enterpriseartifactsmanager.datamodel.SqliteEamDbSettings;

/**
 *
 * @author nick
 */
public class EamDbSettingsDialog extends JDialog {
    private static final Logger LOGGER = Logger.getLogger(EamDbSettingsDialog.class.getName());
    private final Collection<JTextField> textBoxes;
    private final TextBoxChangedListener textBoxChangedListener;
    private final ImageIcon goodIcon;
    private final ImageIcon badIcon;

    private PostgresEamDbSettings dbSettingsPostgres;
    private SqliteEamDbSettings dbSettingsSqlite;
    private Boolean hasChanged;

    /**
     * Creates new form EamDbSettingsDialog
     */
    @Messages({"EamDbSettingsDialog.title.text=Enterprise Artifacts Manager Settings"})
    public EamDbSettingsDialog() {
        super((JFrame) WindowManager.getDefault().getMainWindow(),
            Bundle.EamDbSettingsDialog_title_text(),
            true); // NON-NLS

        textBoxes = new ArrayList<>();
        textBoxChangedListener = new TextBoxChangedListener();
        goodIcon = new ImageIcon(ImageUtilities.loadImage("org/sleuthkit/autopsy/images/good.png", false)); // NON-NLS
        badIcon = new ImageIcon(ImageUtilities.loadImage("org/sleuthkit/autopsy/images/bad.png", false)); // NON-NLS

        initComponents();
        customizeComponents();
        display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bnGrpDatabasePlatforms = new javax.swing.ButtonGroup();
        fcDatabasePath = new javax.swing.JFileChooser();
        pnDatabaseConnectionSettings = new javax.swing.JPanel();
        pnSQLiteSettings = new javax.swing.JPanel();
        lbDatabasePath = new javax.swing.JLabel();
        tfDatabasePath = new javax.swing.JTextField();
        bnDatabasePathFileOpen = new javax.swing.JButton();
        pnPostgreSQLSettings = new javax.swing.JPanel();
        lbHostName = new javax.swing.JLabel();
        lbPort = new javax.swing.JLabel();
        lbUserName = new javax.swing.JLabel();
        lbUserPassword = new javax.swing.JLabel();
        lbDatabaseName = new javax.swing.JLabel();
        tbDbHostname = new javax.swing.JTextField();
        tbDbPort = new javax.swing.JTextField();
        tbDbName = new javax.swing.JTextField();
        tbDbUsername = new javax.swing.JTextField();
        tbDbPassword = new javax.swing.JTextField();
        rdioBnSQLite = new javax.swing.JRadioButton();
        rdioBnPostgreSQL = new javax.swing.JRadioButton();
        rdioBnDisabled = new javax.swing.JRadioButton();
        pnButtons = new javax.swing.JPanel();
        bnCancel = new javax.swing.JButton();
        bnOk = new javax.swing.JButton();
        bnTest = new javax.swing.JButton();
        bnCreateDb = new javax.swing.JButton();
        pnSetupGuidance = new javax.swing.JPanel();
        taSetupGuidance = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnDatabaseConnectionSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.pnDatabaseConnectionSettings.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        pnDatabaseConnectionSettings.setName(""); // NOI18N

        pnSQLiteSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(lbDatabasePath, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbDatabasePath.text")); // NOI18N

        tfDatabasePath.setText(org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.tfDatabasePath.text")); // NOI18N
        tfDatabasePath.setToolTipText(org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.tfDatabasePath.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bnDatabasePathFileOpen, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.bnDatabasePathFileOpen.text")); // NOI18N
        bnDatabasePathFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDatabasePathFileOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSQLiteSettingsLayout = new javax.swing.GroupLayout(pnSQLiteSettings);
        pnSQLiteSettings.setLayout(pnSQLiteSettingsLayout);
        pnSQLiteSettingsLayout.setHorizontalGroup(
            pnSQLiteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSQLiteSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDatabasePath)
                .addGap(18, 18, 18)
                .addComponent(tfDatabasePath, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnDatabasePathFileOpen)
                .addContainerGap())
        );
        pnSQLiteSettingsLayout.setVerticalGroup(
            pnSQLiteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSQLiteSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSQLiteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDatabasePath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDatabasePath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnDatabasePathFileOpen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnPostgreSQLSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(lbHostName, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbHostName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbPort, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbPort.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbUserName, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbUserName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbUserPassword, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbUserPassword.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbDatabaseName, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.lbDatabaseName.text")); // NOI18N

        javax.swing.GroupLayout pnPostgreSQLSettingsLayout = new javax.swing.GroupLayout(pnPostgreSQLSettings);
        pnPostgreSQLSettings.setLayout(pnPostgreSQLSettingsLayout);
        pnPostgreSQLSettingsLayout.setHorizontalGroup(
            pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPostgreSQLSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbHostName)
                    .addComponent(lbPort)
                    .addComponent(lbDatabaseName)
                    .addComponent(lbUserName)
                    .addComponent(lbUserPassword))
                .addGap(18, 18, 18)
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbDbPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                    .addComponent(tbDbUsername)
                    .addComponent(tbDbName)
                    .addComponent(tbDbPort)
                    .addComponent(tbDbHostname))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnPostgreSQLSettingsLayout.setVerticalGroup(
            pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPostgreSQLSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tbDbHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbHostName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbDbPort)
                    .addComponent(lbPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbDbName)
                    .addComponent(lbDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbDbUsername)
                    .addComponent(lbUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPostgreSQLSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbDbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(rdioBnSQLite, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.rdioBnSQLite.text")); // NOI18N
        rdioBnSQLite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdioBnSQLiteActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(rdioBnPostgreSQL, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.rdioBnPostgreSQL.text")); // NOI18N
        rdioBnPostgreSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdioBnPostgreSQLActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(rdioBnDisabled, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.rdioBnDisabled.text")); // NOI18N
        rdioBnDisabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdioBnDisabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnDatabaseConnectionSettingsLayout = new javax.swing.GroupLayout(pnDatabaseConnectionSettings);
        pnDatabaseConnectionSettings.setLayout(pnDatabaseConnectionSettingsLayout);
        pnDatabaseConnectionSettingsLayout.setHorizontalGroup(
            pnDatabaseConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatabaseConnectionSettingsLayout.createSequentialGroup()
                .addComponent(rdioBnPostgreSQL)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnDatabaseConnectionSettingsLayout.createSequentialGroup()
                .addGroup(pnDatabaseConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdioBnSQLite)
                    .addComponent(rdioBnDisabled))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnDatabaseConnectionSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDatabaseConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnSQLiteSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnPostgreSQLSettings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnDatabaseConnectionSettingsLayout.setVerticalGroup(
            pnDatabaseConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatabaseConnectionSettingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdioBnDisabled)
                .addGap(13, 13, 13)
                .addComponent(rdioBnSQLite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnSQLiteSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(rdioBnPostgreSQL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnPostgreSQLSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(329, 329, 329))
        );

        org.openide.awt.Mnemonics.setLocalizedText(bnCancel, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.bnCancel.text")); // NOI18N
        bnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCancelActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bnOk, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.bnOk.text")); // NOI18N
        bnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnOkActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bnTest, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.bnTest.text")); // NOI18N
        bnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnTestActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bnCreateDb, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.bnCreateDb.text")); // NOI18N
        bnCreateDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCreateDbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnButtonsLayout = new javax.swing.GroupLayout(pnButtons);
        pnButtons.setLayout(pnButtonsLayout);
        pnButtonsLayout.setHorizontalGroup(
            pnButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bnTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bnCreateDb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnOk)
                .addGap(11, 11, 11)
                .addComponent(bnCancel)
                .addContainerGap())
        );
        pnButtonsLayout.setVerticalGroup(
            pnButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnOk)
                    .addComponent(bnCancel)
                    .addComponent(bnTest)
                    .addComponent(bnCreateDb))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnSetupGuidance.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(EamDbSettingsDialog.class, "EamDbSettingsDialog.pnSetupGuidance.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        taSetupGuidance.setEditable(false);
        taSetupGuidance.setBackground(new java.awt.Color(240, 240, 240));
        taSetupGuidance.setColumns(20);
        taSetupGuidance.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        taSetupGuidance.setForeground(new java.awt.Color(255, 102, 102));
        taSetupGuidance.setLineWrap(true);
        taSetupGuidance.setRows(3);
        taSetupGuidance.setTabSize(4);
        taSetupGuidance.setWrapStyleWord(true);
        taSetupGuidance.setAutoscrolls(false);
        taSetupGuidance.setBorder(null);
        taSetupGuidance.setRequestFocusEnabled(false);
        taSetupGuidance.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnSetupGuidanceLayout = new javax.swing.GroupLayout(pnSetupGuidance);
        pnSetupGuidance.setLayout(pnSetupGuidanceLayout);
        pnSetupGuidanceLayout.setHorizontalGroup(
            pnSetupGuidanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSetupGuidanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taSetupGuidance)
                .addContainerGap())
        );
        pnSetupGuidanceLayout.setVerticalGroup(
            pnSetupGuidanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSetupGuidanceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(taSetupGuidance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnSetupGuidance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnDatabaseConnectionSettings, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnSetupGuidance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnDatabaseConnectionSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {
        setTextPrompts();
        setTextBoxListeners();

        bnGrpDatabasePlatforms.add(rdioBnDisabled);
        bnGrpDatabasePlatforms.add(rdioBnPostgreSQL);
        bnGrpDatabasePlatforms.add(rdioBnSQLite);
        
        EamDbPlatformEnum selectedPlatform = EamDbPlatformEnum.getSelectedPlatform();
        switch (selectedPlatform) {
            case POSTGRESQL:
                rdioBnPostgreSQL.setSelected(true);
                break;
            case SQLITE:
                rdioBnSQLite.setSelected(true);
                break;
            default:
                rdioBnDisabled.setSelected(true);
        }

    }
    
    private void display() {
        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenDimension.width - getSize().width) / 2, (screenDimension.height - getSize().height) / 2);
        setVisible(true);
    }

    private void bnDatabasePathFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDatabasePathFileOpenActionPerformed
//        fcDatabasePath.setCurrentDirectory(new File(dbSettings.getDbDirectory()));
//        fcDatabasePath.setSelectedFile(new File(dbSettings.getFileNameWithPath()));
        if (fcDatabasePath.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File databaseFile = fcDatabasePath.getSelectedFile();
            try {
                tfDatabasePath.setText(databaseFile.getCanonicalPath());
                valid();
                // TODO: create the db/schema if it doesn't exist.
                // TODO: set variable noting that we created a new db, so it can be removed if Cancel button is clicked.

            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, "Failed to get path of selected database file", ex); // NON-NLS
                JOptionPane.showMessageDialog(this, Bundle.EnterpriseArtifactsManagerSQLiteSettingsDialog_chooserPath_failedToGetDbPathMsg());
            }
        }
    }//GEN-LAST:event_bnDatabasePathFileOpenActionPerformed

    private void bnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnTestActionPerformed
//        lbTestDatabase.setIcon(null);
//        lbTestDatabase.setText("");
//        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//
//        if (dbSettings.testSettings()) {
//            lbTestDatabase.setIcon(goodIcon);
//        } else {
//            lbTestDatabase.setIcon(badIcon);
//        }

//        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_bnTestActionPerformed

    private void bnCreateDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnCreateDbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bnCreateDbActionPerformed

    private void bnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnOkActionPerformed
        hasChanged = true;
//        dbSettings.setEnabled(true);
//        dbSettings.saveSettings();
        dispose();
    }//GEN-LAST:event_bnOkActionPerformed

    private void bnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_bnCancelActionPerformed

    private void rdioBnDisabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdioBnDisabledActionPerformed
        String text = taSetupGuidance.getText();
        if (rdioBnDisabled.isSelected()) {
            taSetupGuidance.setText((text + ",selected Disabled"));
        } else {
            taSetupGuidance.setText((text + ",de-selected Disabled"));
        }
    }//GEN-LAST:event_rdioBnDisabledActionPerformed

    private void rdioBnSQLiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdioBnSQLiteActionPerformed
        String text = taSetupGuidance.getText();
        if (rdioBnSQLite.isSelected()) {
            taSetupGuidance.setText((text + ",selected SQLite"));
        } else {
            taSetupGuidance.setText((text + ",de-selected SQLite"));
        }
    }//GEN-LAST:event_rdioBnSQLiteActionPerformed

    private void rdioBnPostgreSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdioBnPostgreSQLActionPerformed
        String text = taSetupGuidance.getText();
        if (rdioBnPostgreSQL.isSelected()) {
            taSetupGuidance.setText((text + ",selected PostgreSQL"));
        } else {
            taSetupGuidance.setText((text + ",de-selected PostgreSQL"));
        }
    }//GEN-LAST:event_rdioBnPostgreSQLActionPerformed

    /**
     * Add text prompts to all of the text fields.
     */
    @Messages({"EamDbSettingsDialog.textPrompt.hostnameOrIP=Hostname or IP Address",
        "EamDbSettingsDialog.textPrompt.port=Port Number",
        "EamDbSettingsDialog.textPrompt.dbName=Database Name",
        "EamDbSettingsDialog.textPrompt.user=Database User",
        "EamDbSettingsDialog.textPrompt.password=Database User's Password"})
    private void setTextPrompts() {
        Collection<TextPrompt> textPrompts = new ArrayList<>();
        textPrompts.add(new TextPrompt(Bundle.EamDbSettingsDialog_textPrompt_hostnameOrIP(), tbDbHostname));
        textPrompts.add(new TextPrompt(Bundle.EamDbSettingsDialog_textPrompt_port(), tbDbPort));
        textPrompts.add(new TextPrompt(Bundle.EamDbSettingsDialog_textPrompt_dbName(), tbDbName));
        textPrompts.add(new TextPrompt(Bundle.EamDbSettingsDialog_textPrompt_user(), tbDbUsername));
        textPrompts.add(new TextPrompt(Bundle.EamDbSettingsDialog_textPrompt_password(), tbDbPassword));
        configureTextPrompts(textPrompts);
    }
    
    /**
     * Set each textbox with a "statusIcon" property enabling the
     * DocumentListeners to know which icon to erase when changes are made
     */
//    private void setTextBoxStatusIcons() {
//        tbDbHostname.getDocument().putProperty("statusIcon", lbTestDatabase); // NON-NLS
//        tbDbPort.getDocument().putProperty("statusIcon", lbTestDatabase); // NON-NLS
//        tbDbName.getDocument().putProperty("statusIcon", lbTestDatabase); // NON-NLS
//        tbDbUsername.getDocument().putProperty("statusIcon", lbTestDatabase); // NON-NLS
//        tbDbPassword.getDocument().putProperty("statusIcon", lbTestDatabase); // NON-NLS
//    }
//    
    /**
     * Register for notifications when the text boxes get updated.
     */
    private void setTextBoxListeners() {
        textBoxes.add(tfDatabasePath);
        textBoxes.add(tbDbHostname);
        textBoxes.add(tbDbPort);
        textBoxes.add(tbDbName);
        textBoxes.add(tbDbUsername);
        textBoxes.add(tbDbPassword);
        addDocumentListeners(textBoxes, textBoxChangedListener);
    }

    /**
     * Sets the foreground color and transparency of a collection of text
     * prompts.
     *
     * @param textPrompts The text prompts to configure.
     */
    private static void configureTextPrompts(Collection<TextPrompt> textPrompts) {
        float alpha = 0.9f; // Mostly opaque
        for (TextPrompt textPrompt : textPrompts) {
            textPrompt.setForeground(Color.LIGHT_GRAY);
            textPrompt.changeAlpha(alpha);
        }
    }

    /**
     * Adds a change listener to a collection of text fields.
     *
     * @param textFields The text fields.
     * @param listener   The change listener.
     */
    private static void addDocumentListeners(Collection<JTextField> textFields, TextBoxChangedListener listener) {
        textFields.forEach((textField) -> {
            textField.getDocument().addDocumentListener(listener);
        });
    }

    /**
     * Tests whether or not values have been entered in all of the database
     * settings text fields.
     *
     * @return True or false.
     */
    private boolean databaseFieldsArePopulated() {
        return !tbDbHostname.getText().trim().isEmpty()
                && !tbDbPort.getText().trim().isEmpty()
                && !tbDbName.getText().trim().isEmpty()
                && !tbDbUsername.getText().trim().isEmpty()
                && !tbDbPassword.getText().trim().isEmpty();
    }

    /**
     * Tests whether or not all of the settings components are populated.
     *
     * @return True or false.
     */
    @Messages({"EamDbSettingsDialog.validation.incompleteFields=Fill in all values"})
    private boolean checkFields() {
        boolean result = true;

        boolean dbPopulated = databaseFieldsArePopulated();

        if (!dbPopulated) {
            // We don't even have everything filled out
            result = false;
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_incompleteFields());
        }
        return result;
    }

    /**
     * Tests whether or not the database settings are valid.
     *
     * @return True or false.
     */
    @Messages({"EamDbSettingsDialog.validation.invalidHost=Invalid database hostname.",
        "EamDbSettingsDialog.validation.invalidPort=Invalid database port number.",
        "EamDbSettingsDialog.validation.invalidDbName=Invalid database name.",
        "EamDbSettingsDialog.validation.invalidDbUser=Invalid database username.",
        "EamDbSettingsDialog.validation.invalidDbPassword=Invalid database password.",})
    private boolean databaseSettingsAreValid() {
/*
        try {
            dbSettings.setHost(tbDbHostname.getText().trim());
        } catch (EamDbException ex) {
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_invalidHost());
            return false;
        }

        try {
            dbSettings.setPort(Integer.valueOf(tbDbPort.getText().trim()));
        } catch (NumberFormatException | EamDbException ex) {
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_invalidPort());
            return false;
        }

        try {
            dbSettings.setDbName(tbDbName.getText().trim());
        } catch (EamDbException ex) {
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_invalidDbName());
            return false;
        }

        try {
            dbSettings.setUserName(tbDbUsername.getText().trim());
        } catch (EamDbException ex) {
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_invalidDbUser());
            return false;
        }

        try {
            dbSettings.setPassword(tbDbPassword.getText().trim());
        } catch (EamDbException ex) {
            taSetupGuidance.setText(Bundle.EamDbSettingsDialog_validation_invalidDbPassword());
            return false;
        }
*/
        return true;
    }

    /**
     * Validates that the form is filled out correctly for our usage.
     *
     * @return true if it's okay, false otherwise.
     */
    public boolean valid() {
//        taSetupGuidance.setText("");
/*
        return checkFields()
                && enableTestDatabaseButton(databaseSettingsAreValid())
                && enableSaveButton(databaseSettingsAreValid());
*/
        return true;
    }

    /**
     * Used to listen for changes in text boxes. It lets the panel know things
     * have been updated and that validation needs to happen.
     */
    private class TextBoxChangedListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon"); // NON-NLS
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            valid();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon"); // NON-NLS
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            valid();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            Object statusIcon = e.getDocument().getProperty("statusIcon"); // NON-NLS
            if (statusIcon != null) {
                ((javax.swing.JLabel) statusIcon).setIcon(null);
            }
            firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            valid();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnCancel;
    private javax.swing.JButton bnCreateDb;
    private javax.swing.JButton bnDatabasePathFileOpen;
    private javax.swing.ButtonGroup bnGrpDatabasePlatforms;
    private javax.swing.JButton bnOk;
    private javax.swing.JButton bnTest;
    private javax.swing.JFileChooser fcDatabasePath;
    private javax.swing.JLabel lbDatabaseName;
    private javax.swing.JLabel lbDatabasePath;
    private javax.swing.JLabel lbHostName;
    private javax.swing.JLabel lbPort;
    private javax.swing.JLabel lbUserName;
    private javax.swing.JLabel lbUserPassword;
    private javax.swing.JPanel pnButtons;
    private javax.swing.JPanel pnDatabaseConnectionSettings;
    private javax.swing.JPanel pnPostgreSQLSettings;
    private javax.swing.JPanel pnSQLiteSettings;
    private javax.swing.JPanel pnSetupGuidance;
    private javax.swing.JRadioButton rdioBnDisabled;
    private javax.swing.JRadioButton rdioBnPostgreSQL;
    private javax.swing.JRadioButton rdioBnSQLite;
    private javax.swing.JTextArea taSetupGuidance;
    private javax.swing.JTextField tbDbHostname;
    private javax.swing.JTextField tbDbName;
    private javax.swing.JTextField tbDbPassword;
    private javax.swing.JTextField tbDbPort;
    private javax.swing.JTextField tbDbUsername;
    private javax.swing.JTextField tfDatabasePath;
    // End of variables declaration//GEN-END:variables
}
