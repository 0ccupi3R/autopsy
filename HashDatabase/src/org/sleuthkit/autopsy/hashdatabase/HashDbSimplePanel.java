/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.hashdatabase;

import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import org.sleuthkit.autopsy.coreutils.Log;

/**
 * Simple info panel for HashDb service
 */
public class HashDbSimplePanel extends javax.swing.JPanel {

    private static HashDbSimplePanel instance = null;

    /** Creates new form HashDbSimplePanel */
    public HashDbSimplePanel() {
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {


        try {
            HashDbSettings settings = HashDbSettings.getHashDbSettings();
            boolean hasKnown = settings.getNSRLDatabase() != null;
            if (hasKnown) {
                knownValLabel.setText("Set");
            } else {
                knownValLabel.setText("Not set");
            }
            String notablePath = settings.getKnownBadDatabasePath();
            if (notablePath == null || notablePath.equals(""))
                notableValLabel.setText("Not set");
            else {
                StringTokenizer tok = new StringTokenizer(notablePath, File.separator);
                String name = null;
                while (tok.hasMoreElements())
                    name = tok.nextToken();
                
                notableValLabel.setText(name);
            }

        } catch (IOException ex) {
            Log.get(HashDbSimplePanel.class).log(Level.WARNING, "Couldn't get Hash DB settings", ex);
        }
    }

    static synchronized HashDbSimplePanel getDefault() {
        if (instance == null) {
            instance = new HashDbSimplePanel();
        }

        return instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        knownLabel = new javax.swing.JLabel();
        notableLabel = new javax.swing.JLabel();
        knownValLabel = new javax.swing.JLabel();
        notableValLabel = new javax.swing.JLabel();

        knownLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        knownLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, "HashDbSimplePanel.knownLabel.text")); // NOI18N

        notableLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        notableLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, "HashDbSimplePanel.notableLabel.text")); // NOI18N

        knownValLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        knownValLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, "HashDbSimplePanel.knownValLabel.text")); // NOI18N

        notableValLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        notableValLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, "HashDbSimplePanel.notableValLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(knownLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(knownValLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notableLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notableValLabel)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(knownValLabel)
                    .addComponent(knownLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notableValLabel)
                    .addComponent(notableLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel knownLabel;
    private javax.swing.JLabel knownValLabel;
    private javax.swing.JLabel notableLabel;
    private javax.swing.JLabel notableValLabel;
    // End of variables declaration//GEN-END:variables
}
