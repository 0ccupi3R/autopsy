/*
 * Autopsy Forensic Browser
 *
 * Copyright 2013 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.imageanalyzer;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import java.util.concurrent.atomic.AtomicReference;
import javafx.application.Platform;
import javax.swing.SwingUtilities;

/**
 *
 */
public class ThreadUtils {

    /**
     * analogous to {@link SwingUtilities#invokeAndWait(java.lang.Runnable) with a return value.
     * Should be used extremely cautiausly as it blocks the edt thread.
     *
     * @param <E> The type of the return value generated by the given Callable,
     *            r.
     * @param r   A callable to be invoked on the ui thread.
     *
     * @return the result of the Callable's call method;
     */
    public static <E> E invokeAndWait(final Callable<E> r) {
        final AtomicReference<E> ref = new AtomicReference<>();
        final AtomicReference<Exception> except = new AtomicReference<>();
        try {
            SwingUtilities.invokeAndWait(() -> {
                try {
                    ref.set(r.call());
                } catch (Exception e) {
                    except.set(e);
                }
            });
        } catch (InterruptedException | InvocationTargetException ex) {
            throw new RuntimeException(ex);
        } finally {
            if (except.get() != null) {
                throw new RuntimeException(except.get());
            } else {
                return ref.get();
            }
        }
    }

    /**
     * analogous to {@link SwingUtilities#invokeAndWait(java.lang.Runnable) for JavaFX.
     * Should be used extremely cautiausly as it blocks the JavaFx UI  thread.
     *
     * @param runnable the runnable to be invoked on the javafx ui thred
     *
     * @throws InterruptedException
     * @throws ExecutionException
     */
    public static void runAndWait(Runnable runnable) throws InterruptedException, ExecutionException {
        FutureTask future = new FutureTask(runnable, null);
        Platform.runLater(future);
        future.get();
    }

    /**
     *
     * @param r the value of r
     */
    public static void runNowOrLater(Runnable r) {
        if (Platform.isFxApplicationThread()) {
            r.run();
        } else {
            Platform.runLater(r);
        }
    }
}
