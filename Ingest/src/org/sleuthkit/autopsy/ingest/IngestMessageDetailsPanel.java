/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.ingest;

import org.openide.util.Lookup;
import org.sleuthkit.autopsy.corecomponentinterfaces.BlackboardResultViewer;
import org.sleuthkit.datamodel.BlackboardArtifact;

/**
 * Details panel within IngestMessagePanel
 */
class IngestMessageDetailsPanel extends javax.swing.JPanel {

    private IngestMessageMainPanel mainPanel;

    /** Creates new form IngestMessageDetailsPanel */
    IngestMessageDetailsPanel(IngestMessageMainPanel mainPanel) {
        this.mainPanel = mainPanel;
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        messageDetailsPane.setContentType("text/html");
        viewArtifactButton.setEnabled(false);
        viewContentButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        viewContentButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageDetailsPane = new javax.swing.JEditorPane();
        viewArtifactButton = new javax.swing.JButton();

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/ingest/arrow_left.gif"))); // NOI18N
        backButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, "IngestMessageDetailsPanel.backButton.text")); // NOI18N
        backButton.setAlignmentY(0.0F);
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        backButton.setMaximumSize(new java.awt.Dimension(23, 23));
        backButton.setMinimumSize(new java.awt.Dimension(23, 23));
        backButton.setPreferredSize(new java.awt.Dimension(23, 23));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewContentButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, "IngestMessageDetailsPanel.viewContentButton.text")); // NOI18N
        viewContentButton.setAlignmentY(0.0F);
        viewContentButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        viewContentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewContentButtonActionPerformed(evt);
            }
        });

        messageDetailsPane.setBackground(new java.awt.Color(221, 221, 235));
        messageDetailsPane.setBorder(null);
        messageDetailsPane.setContentType(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, "IngestMessageDetailsPanel.messageDetailsPane.contentType")); // NOI18N
        messageDetailsPane.setEditable(false);
        messageDetailsPane.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jScrollPane1.setViewportView(messageDetailsPane);

        viewArtifactButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, "IngestMessageDetailsPanel.viewArtifactButton.text")); // NOI18N
        viewArtifactButton.setAlignmentY(0.0F);
        viewArtifactButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        viewArtifactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewArtifactButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(viewArtifactButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewContentButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewContentButton)
                        .addComponent(viewArtifactButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewContentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewContentButtonActionPerformed
        viewContent(evt);
    }//GEN-LAST:event_viewContentButtonActionPerformed

    private void viewArtifactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewArtifactButtonActionPerformed
        viewArtifact(evt);
    }//GEN-LAST:event_viewArtifactButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        mainPanel.showMessages();
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane messageDetailsPane;
    private javax.swing.JButton viewArtifactButton;
    private javax.swing.JButton viewContentButton;
    // End of variables declaration//GEN-END:variables

    private void viewArtifact(java.awt.event.ActionEvent evt) {

        final IngestMessage message = mainPanel.getMessagePanel().getSelectedMessage();
        if (message != null) {
            BlackboardArtifact art = message.getData();
            if (art != null) {
                BlackboardResultViewer v = Lookup.getDefault().lookup(BlackboardResultViewer.class);
                v.viewArtifact(art);
            }
        }

    }

    private void viewContent(java.awt.event.ActionEvent evt) {

        final IngestMessage message = mainPanel.getMessagePanel().getSelectedMessage();
        if (message != null) {
            BlackboardArtifact art = message.getData();
            if (art != null) {
                BlackboardResultViewer v = Lookup.getDefault().lookup(BlackboardResultViewer.class);
                v.viewArtifactContent(art);
            }
        }
    }


    void showDetails(int rowNumber) {
        final IngestMessage message = mainPanel.getMessagePanel().getMessage(rowNumber);
        if (message != null) {
            String details = message.getDetails();
            if (details != null) {
                this.messageDetailsPane.setText(details);
            } else {
                this.messageDetailsPane.setText("");
            }
            if (message.getData() != null) {
                viewArtifactButton.setEnabled(true);
                viewContentButton.setEnabled(true);
            } else {
                viewArtifactButton.setEnabled(false);
                viewContentButton.setEnabled(false);
            }
        } else {
            viewArtifactButton.setEnabled(false);
            viewContentButton.setEnabled(false);
            messageDetailsPane.setText("");
        }
    }
    
    
}
