/*
 * Autopsy Forensic Browser
 * 
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * KeywordSearchIngestSimplePanel.java
 *
 * Created on Feb 28, 2012, 1:11:34 PM
 */
package org.sleuthkit.autopsy.keywordsearch;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author dfickling
 */
public class KeywordSearchIngestSimplePanel extends JPanel {
    
    private final static Logger logger = Logger.getLogger(KeywordSearchIngestSimplePanel.class.getName());
    private KeywordTableModel tableModel;
    private List<KeywordSearchList> lists;

    /** Creates new form KeywordSearchIngestSimplePanel */
    public KeywordSearchIngestSimplePanel() {
        tableModel = new KeywordTableModel();
        lists = new ArrayList<KeywordSearchList>();
        reloadLists();
        initComponents();
        customizeComponents();
    }
    
    private void customizeComponents() {
        listsTable.setModel(tableModel);
        
        listsTable.setTableHeader(null);
        listsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //customize column witdhs
        final int width = listsScrollPane.getPreferredSize().width;
        TableColumn column = null;
        for (int i = 0; i < listsTable.getColumnCount(); i++) {
            column = listsTable.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(((int) (width * 0.15)));
            } else {
                column.setPreferredWidth(((int) (width * 0.84)));
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listsScrollPane = new javax.swing.JScrollPane();
        listsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(300, 300));

        listsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        listsTable.setShowHorizontalLines(false);
        listsTable.setShowVerticalLines(false);
        listsScrollPane.setViewportView(listsTable);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, "KeywordSearchIngestSimplePanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(138, Short.MAX_VALUE))
            .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane listsScrollPane;
    private javax.swing.JTable listsTable;
    // End of variables declaration//GEN-END:variables

    private void reloadLists() {
        lists.clear();
        lists.addAll(KeywordSearchListsXML.getCurrent().getListsL());
    }

    private class KeywordTableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return KeywordSearchIngestSimplePanel.this.lists.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            KeywordSearchList list = KeywordSearchIngestSimplePanel.this.lists.get(rowIndex);
            if(columnIndex == 0) {
                return list.getUseForIngest();
            } else {
                return list.getName();
            }
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            KeywordSearchList list = KeywordSearchIngestSimplePanel.this.lists.get(rowIndex);
            if(columnIndex == 0){
                KeywordSearchListsXML loader = KeywordSearchListsXML.getCurrent();
                loader.addList(list.getName(), list.getKeywords(), (Boolean) aValue, false);
                reloadLists();
            }
        }
        
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        
    }
    
  
}
