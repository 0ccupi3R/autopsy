<project name="AutopsyTSKTargets">
    
    <!-- Need a way to specify TSK Debug versus Release -->
    <property name="TSK_BUILD_TYPE">Release</property>
    
    <target name="copyTSKLibsToRelease">
        <property environment="env"/>
        <condition property="ewfFound">
            <isset property="env.LIBEWF_HOME"/>
        </condition>
        <fail unless="ewfFound" message="LIBEWF_HOME must be set as an environment variable."/>

        <copy file="${env.TSK_HOME}/win32/${TSK_BUILD_TYPE}/libtsk_jni.dll" tofile="${basedir}/DataModel/release/modules/lib/libtsk_jni.dll"/>
        <copy file="${env.LIBEWF_HOME}/msvscpp/Release/libewf.dll" tofile="${basedir}/DataModel/release/modules/lib/libewf.dll"/> 
        <copy file="${env.LIBEWF_HOME}/msvscpp/Release/zlib.dll" tofile="${basedir}/DataModel/release/modules/lib/zlib.dll"/>
    </target>
    
    <target name="copyExternalLibsToZip">
        
        <!-- Find CRT version we linked against from libtsk_jni manifest -->
        <property name="libtsk.manifest.path">${env.TSK_HOME}/win32/tsk_jni/${TSK_BUILD_TYPE}/libtsk_jni.dll.intermediate.manifest</property>
        <loadfile property="libtsk.manifest" srcFile="${libtsk.manifest.path}" />
        <propertyregex property="CRT.version"
             input="${libtsk.manifest}"
             regexp=".*Microsoft\.VC90.*?version\s*?=\s*?'(.*?)'"
             select="\1"
             casesensitive="false" />      
        <echo>Found CRT.version linked against: ${CRT.version}</echo>
        
        <!-- Get C++ Runtime dlls -->
        <property environment="env"/>
        <condition property="crtDetected">
            <isset property="CRT.version"/>
        </condition>
        <fail unless="crtDetected" message="CRT version not detected, check libtsk_jni manifest."/> 
        
        <property name="CRT.path">${thirdparty.dir}/crt/x86-32/${CRT.version}/crt.zip</property>
        <available file="${CRT.path}"  property="crtFound"/>
        
        <fail unless="crtFound" message="Detected CRT version ${CRT.version} not found in the thirdparty repo."/>

        <!-- unzip from thirdparty repo to modules/lib in staged dir -->
        <unzip src="${CRT.path}" dest="${zip-tmp}/${app.name}/${app.name}/modules/lib"/>
    </target>
    
    <target name="autoAIPath" >
        <available file="C:\Program Files (x86)\Caphyon\Advanced Installer 9.2\bin\x86\AdvancedInstaller.com"
                    property="aiPath"
                    value="C:\Program Files (x86)\Caphyon\Advanced Installer 9.2\bin\x86\AdvancedInstaller.com"/>
    </target>
    
    <target name="inputAIPath" unless="aiPath">
        <input addProperty="aiPath"
            message="Enter the location of AdvancedInstaller.com"/>
    </target>

    <target name="run-advanced-installer" depends="autoAIPath,inputAIPath">
        <fail unless="aiPath" message="Could not locate Advanced Installer."/>
        <exec executable="${aiPath}">
            <arg line="/build ${basedir}\installer_${app.name}\installer_${app.name}.aip"/>
        </exec>
    </target>
    
    <target name="build-installer-windows">
        <antcall target="run-advanced-installer" />
        <move file="${basedir}/installer_${app.name}/installer_${app.name}-SetupFiles/installer_${app.name}.msi"
                tofile="${nbdist.dir}/${app.name}-installer.msi"/>
        <!--<delete dir="${nbdist.dir}/${app.name}-installer"/>-->
        <delete dir="${basedir}/installer_${app.name}/installer_${app.name}-cache"/>
        <delete dir="${basedir}/installer_${app.name}/installer_${app.name}-SetupFiles"/>
    </target>
</project>
